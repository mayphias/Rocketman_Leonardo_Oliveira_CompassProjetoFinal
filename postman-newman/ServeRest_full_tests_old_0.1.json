{
	"info": {
		"_postman_id": "1f9fa07c-9b2c-431e-aa9a-4d65a3d683d3",
		"name": "ServeRest Copy",
		"description": "**O ServeRest é uma API REST gratuita que simula uma loja virtual com intuito de servir de material de estudos de testes de API.**\n\n**Não deixe de seguir o [autor do projeto](https://github.com/PauloGoncalvesBH) e deixar um star no repositório: [github.com/ServeRest/ServeRest](https://github.com/ServeRest/ServeRest)**\n\nEssa página documenta todas as rotas e como acessá-las. Para mais detalhes do ServeRest (como executar localmente utilizando Docker ou NPM, alterar timeout de autenticação, etc) acesse [o repositório do ServeRest](https://github.com/serverest/serverest).\n\nEstá utilizando Postman? Importe o [JSON do Swagger](https://raw.githubusercontent.com/ServeRest/ServeRest/trunk/docs/swagger.json) para ter acesso às collections.\n\nVai fazer teste de carga? Leia a seção '[Teste de Carga](https://github.com/ServeRest/ServeRest#teste-de-carga)'.\n\n\nMuito obrigado ♥ a todos que apoiam o projeto [financeiramente](https://opencollective.com/serverest#section-contributors) ou [com código, ideias e divulgação](https://github.com/ServeRest/ServeRest#contribuidores-), graças a vocês **mais de R$ 2000,00 foram doados para a ONG [Todas as letras](https://todasasletras.org/)** até o momento.\n\nO ServeRest possui um front, com status em beta, não deixe de conhecer: [front.serverest.dev](https://front.serverest.dev).\n\nPrecisa de apoio? [Abra uma issue](https://github.com/ServeRest/ServeRest/issues) ou contate o mantenedor do projeto:\n\n\nContact Support:\n Name: Paulo Gonçalves",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21297513"
	},
	"item": [
		{
			"name": "Testes",
			"item": [
				{
					"name": "fluxos",
					"item": [
						{
							"name": "fluxo1-loja-adicionar/remover-itens",
							"item": [
								{
									"name": "FL01-01 login com credencial",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//---------------- declaracao de variaveis ----------------------",
													"const response = pm.response.json();",
													"",
													"//----------------------- testes -------------------------------",
													"//---------------status code é 200 ---------------------------",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message', 'authorization'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");",
													"})",
													"//configurando token para o proximo teste",
													"pm.environment.set(\"token-bear\", response.authorization.slice(7));",
													"",
													"//tamanho do token bearer certo",
													"pm.test('tamanho do token bearer esta correto', function() {",
													"    pm.expect(pm.response.json().authorization.length).to.be.equal(198);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"leonardo@test.com\",\n  \"password\": \"12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										},
										"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
									},
									"response": [
										{
											"name": "Login realizado com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
										},
										{
											"name": "E-mail e/ou senha inválidos",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
										}
									]
								},
								{
									"name": "FL01-02 Cadastrar produto novo",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//declaracao de variaveis e listas",
													"const novos_produtos = [\"skate\", \"guitarra\", \"Poster de Full metal Alchemist\", \"joao bobo\", \"coleção de manga One Piece\", \"Dvd do System of a Down\", \"Bola do quico\"];",
													"const descricao_nova = [\"negocio de andar\", \"lindo instrumento\", \"para bater no irmão\", \"para ser um fã melhor\", \"Para os apixonados pela série\", \"Para metaleiros anos 2000\", \"Quico, amigo do chaves\"];",
													"//-------------------funcoes ---------------",
													"function getRandomInt(max) {     //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random",
													"    return Math.floor(Math.random() * max);",
													"}",
													"",
													"//-------------------- chamada de funcoes e geracao de numeros aleatorios",
													"pm.environment.set(\"item_nome\", novos_produtos[_.random(novos_produtos.length -1)]);",
													"pm.environment.set(\"item_desc\", descricao_nova[_.random(descricao_nova.length -1)]);",
													"pm.environment.set(\"item_quantidade\", getRandomInt(100) );",
													"pm.environment.set(\"item_preco\", getRandomInt(1000));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------------testes -------------------",
													"//------------------ status 201 ----------------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code is 201 e nao erro\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message', '_id'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//resposta contem:",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
													"});",
													"",
													"",
													"//----------------------configurando variaveis de ambiente ----------------",
													"pm.environment.set(\"id\", response._id);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"{{item_nome}}\",\n  \"preco\": {{item_preco}},\n  \"descricao\": \"{{item_desc}}\",\n  \"quantidade\": {{item_quantidade}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								},
								{
									"name": "FL01-03 Listar produtos cadastrados",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//---------------------------testes --------------------------------",
													"//---------------------------status 200 -----------------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200)",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['quantidade', 'produtos'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//confirmar se a quantidade demonstrada pelo body é igual a quantidade real",
													"pm.test(\"A quantidade de produtos corresponde a quantidade de itens\", function (){",
													"    pm.expect(response.produtos.length).to.be.equal(response.quantidade)",
													"});",
													"//validacao de atributos dos produtos",
													"const prod_list = ['nome', 'preco', 'descricao', 'quantidade', '_id'];",
													"",
													"pm.test('Resposta contem todos os atributos dos produtos', function (){",
													"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-edd08e85-3304-4b1c-a5b1-27f413fe89c9",
													"   response.produtos.forEach((produto) => {",
													"       pm.expect(produto).to.have.all.keys(prod_list);",
													"   });",
													"    ",
													"});",
													"",
													"//--------------------configuracoes de variaveis de ambiente ----------------------",
													"//armazena o valor id do produto criado correto",
													"const prod = response.produtos;",
													"",
													"prod.forEach(produto => {",
													"    //console.log(pm.environment.get(\"cliente1\"))",
													"    if( produto.nome == (pm.environment.get(\"item_nome\"))) {",
													"        //console.log(\"entrei no if\");",
													"        pm.environment.set(\"item_id\", produto._id);",
													"    }",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											],
											"query": [
												{
													"key": "_id",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "nome",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "preco",
													"value": "73417346",
													"disabled": true
												},
												{
													"key": "descricao",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "quantidade",
													"value": "80996386",
													"disabled": true
												}
											]
										}
									},
									"response": [
										{
											"name": "Lista de produtos",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/produtos?_id=nostrud laboris ad&nome=nostrud laboris ad&preco=73417346&descricao=nostrud laboris ad&quantidade=80996386",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													],
													"query": [
														{
															"key": "_id",
															"value": "nostrud laboris ad"
														},
														{
															"key": "nome",
															"value": "nostrud laboris ad"
														},
														{
															"key": "preco",
															"value": "73417346"
														},
														{
															"key": "descricao",
															"value": "nostrud laboris ad"
														},
														{
															"key": "quantidade",
															"value": "80996386"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"quantidade\": 2,\n  \"usuarios\": [\n    {\n      \"nome\": \"Logitech MX Vertical\",\n      \"preco\": 470,\n      \"descricao\": \"Mouse\",\n      \"quantidade\": 381,\n      \"_id\": \"BeeJh5lz3k6kSIzA\"\n    },\n    {\n      \"nome\": \"Samsung 60 polegadas\",\n      \"preco\": 5240,\n      \"descricao\": \"TV\",\n      \"quantidade\": 49977,\n      \"_id\": \"K6leHdftCeOJj8BJ\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "FL01-04 Buscar produto por ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------- testes ----------------------------",
													"//------------------------status 200 ---------------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['nome', 'preco', 'descricao', 'quantidade', '_id'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseURL}}/produtos/:_id",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{item_id}}",
													"description": "(Required) ID do produto"
												}
											]
										}
									},
									"response": [
										{
											"name": "Produto encontrado",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "BeeJh5lz3k6kSIzA",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381,\n  \"_id\": \"BeeJh5lz3k6kSIzA\"\n}"
										},
										{
											"name": "Produto não encontrado",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "BeeJh5lz3k6kSIzA",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Produto não encontrado\"\n}"
										}
									]
								},
								{
									"name": "FL01-05 Editar produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------testes------------------------",
													"//------------------------status 200----------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, pm.expect(pm.response.json()[atributo]).to.exist)",
													"});",
													"//resposta contem:",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//declaracao de funcoes",
													"function getRandomInt(max) {     //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random",
													"    return Math.floor(Math.random() * max);",
													"}",
													"",
													"//chamada de funcoes e geracao de numeros aleatorios",
													"pm.variables.set(\"quantidade\", getRandomInt(100) );",
													"pm.variables.set(\"preco\", getRandomInt(1000));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"nome\": \"{{item_nome}}\",\n    \"preco\": \"{{item_preco}}\",\n    \"descricao\": \"item editado\",\n    \"quantidade\": \"{{item_quantidade}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/:_id",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{item_id}}",
													"description": "(Required) ID do produto"
												}
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
									},
									"response": [
										{
											"name": "Alterado com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
										},
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								},
								{
									"name": "FL01-06 Excluir produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//--------------------------testes----------------------",
													"//-------------------------status 200 ----------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e contem body json\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, pm.expect(pm.response.json()[atributo]).to.exist)",
													"})",
													"",
													"//resposta contem:",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseURL}}/produtos/:_id",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{item_id}}",
													"description": "(Required) ID do produto"
												}
											]
										},
										"description": "Não é permitido excluir produto que faz parte de carrinho."
									},
									"response": [
										{
											"name": "Registro excluído com sucesso | Nenhum registro excluído",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
										},
										{
											"name": "Produto faz parte de carrinho",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Não é permitido excluir produto que faz parte de carrinho\",\n  \"idCarrinho\": [\n    \"qbMqntef4iTOwWfg, yILJY1eaAUC6hyRc\",\n    \"qbMqntef4iTOwWfg, yILJY1eaAUC6hyRc\"\n  ]\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								}
							],
							"description": "Um fluxo de comandos que poderiam ser utilizados por uma loja por essa API da serverest, seguido de um login cadastrado, cadastro de novo produto, listagem dos produtos, busca por id do novo produto, edição do novo produto e por fim exclusão do novo produto."
						},
						{
							"name": "Fluxo2-loja-restoque",
							"item": [
								{
									"name": "FL02-01 login com credencial",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//---------------------------testes ------------------------",
													"//-------------------------status 200 -----------------------",
													"//status code é 200",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message', 'authorization'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");",
													"})",
													"//tamanho do token bearer certo (para este certo login administrativo)",
													"pm.test('tamanho do token bearer esta correto', function() {",
													"    pm.expect(pm.response.json().authorization.length).to.be.equal(198);",
													"})",
													"",
													"//-----------------------configurando variaveis de ambiente ----------------------",
													"//configurando token para o proximo teste",
													"pm.environment.set(\"token-bear\", response.authorization.slice(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"leonardo@test.com\",\n  \"password\": \"12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										},
										"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
									},
									"response": [
										{
											"name": "Login realizado com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
										},
										{
											"name": "E-mail e/ou senha inválidos",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
										}
									]
								},
								{
									"name": "FL02-02 listar produtos cadastrados",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"let tamanho = pm.response.json().produtos.length;",
													"",
													"//declaracao de funcoes",
													"function getRandomInt(max) {     //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random",
													"    return Math.floor(Math.random() * max);",
													"}",
													"",
													"",
													"//-------------------------testes---------------------",
													"//-----------------------status 200 -------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['quantidade', 'produtos'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//confirmar se a quantidade demonstrada pelo body é igual a quantidade real",
													"pm.test(\"A quantidade de produtos corresponde a quantidade de itens\", function (){",
													"    pm.expect(response.produtos.length).to.be.equal(response.quantidade)",
													"});",
													"//validacao de atributos dos produtos",
													"const prod_list = ['nome', 'preco', 'descricao', 'quantidade', '_id'];",
													"",
													"pm.test('Resposta contem todos os atributos dos produtos', function (){",
													"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-edd08e85-3304-4b1c-a5b1-27f413fe89c9",
													"   response.produtos.forEach((produto) => {",
													"       pm.expect(produto).to.have.all.keys(prod_list);",
													"   });",
													"    ",
													"});",
													"",
													"",
													"//-------------------------configurando variaveis de ambiente ---------------------",
													"",
													"//armazena o valor id, nome e desc de um produto aleatorio",
													"const rad = getRandomInt(tamanho);",
													"const prop = response.produtos[rad];",
													"//console.log(prop);",
													"pm.environment.set(\"item_id\", prop._id);",
													"pm.environment.set('item_nome', prop.nome);",
													"pm.environment.set('item_desc', prop.descricao);",
													"//console.log(prop._id);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								},
								{
									"name": "FL02-03 Editar produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//--------------------------------testes -------------------------",
													"//-----------------------------status 200 -----------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, pm.expect(pm.response.json()[atributo]).to.exist)",
													"});",
													"//resposta contem:",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//declaracao de funcoes",
													"//valor int aleatorio dado o limite",
													"function getRandomInt(max) {     //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random",
													"    return Math.floor(Math.random() * max);",
													"}",
													"//gera um novo valor int que nao seja 0",
													"function new_preco (){",
													"    let preco;",
													"    for (i =0; i == 0; i = preco){",
													"        preco = getRandomInt(1000);",
													"    }",
													"    return (preco);",
													"}",
													"",
													"// -------------------------------configuracao de variaveis de ambiente ----------------------------",
													"pm.environment.set(\"item_quantidade\", getRandomInt(500) );",
													"pm.environment.set(\"item_preco\", new_preco());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"nome\": \"{{item_nome}}\",\n\"preco\": {{item_preco}},\n\"descricao\": \"{{item_desc}}\",\n\"quantidade\": {{item_quantidade}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/:_id",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{item_id}}",
													"description": "(Required) ID do produto"
												}
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
									},
									"response": [
										{
											"name": "Alterado com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
										},
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								}
							],
							"description": "Um fluxo de comandos que poderiam ser utilizados por uma loja por essa API da serverest, seguido de um login cadastrado, para fazer o restoque de produtos da loja."
						},
						{
							"name": "fluxo1-usuario-compra",
							"item": [
								{
									"name": "FU01-01 login - usuário existente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------------testes--------------------------",
													"//-----------------------------status 200------------------------",
													"//status code é 200",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message', 'authorization'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");",
													"})",
													"//tamanho do token bearer certo",
													"pm.test('tamanho do token bearer esta correto', function() {",
													"    pm.expect(pm.response.json().authorization.length).to.be.equal(198);",
													"})",
													"",
													"//-----------------------configurando variaveis de ambiente ----------------------",
													"pm.environment.set(\"token-bear\", response.authorization.slice(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"leonardo@test.com\",\n  \"password\": \"12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "FU01-02 listar itens da loja",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"let tamanho = pm.response.json().produtos.length;",
													"",
													"//declaracao de funcoes",
													"function getRandomInt(max) {     //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random",
													"    return Math.floor(Math.random() * max);",
													"}",
													"",
													"//---------------------------testes -----------------------------",
													"//------------------------status 200 -----------------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['quantidade', 'produtos'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//confirmar se a quantidade demonstrada pelo body é igual a quantidade real",
													"pm.test(\"A quantidade de produtos corresponde a quantidade de itens\", function (){",
													"    pm.expect(response.produtos.length).to.be.equal(response.quantidade)",
													"});",
													"//validacao de atributos dos produtos",
													"const prod_list = ['nome', 'preco', 'descricao', 'quantidade', '_id'];",
													"",
													"pm.test('Resposta contem todos os atributos dos produtos', function (){",
													"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-edd08e85-3304-4b1c-a5b1-27f413fe89c9",
													"   response.produtos.forEach((produto) => {",
													"       pm.expect(produto).to.have.all.keys(prod_list);",
													"   });",
													"    ",
													"});",
													"",
													"",
													"",
													"",
													"//-----------------configuracao de variaveis de ambiente ---------------------------------",
													"//pega um id de um produto aleatorio da loja",
													"const rad = getRandomInt(tamanho -1);",
													"const prop = response.produtos[rad];",
													"//console.log(prop);",
													"pm.environment.set(\"item_id\", prop._id);",
													"//console.log(prop._id);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											],
											"query": [
												{
													"key": "_id",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "nome",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "preco",
													"value": "73417346",
													"disabled": true
												},
												{
													"key": "descricao",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "quantidade",
													"value": "80996386",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FU01-03 cadastrar carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"const stats = pm.response.status;",
													"//console.log (stats);",
													"",
													"//------------------------testes------------------------",
													"",
													"//----------------------status code 201 -------------------",
													"if(   stats == 'Created'){",
													"    //Item criado com sucesso",
													"    pm.test(\"Status code e 201 e nao erro\", function () {",
													"        pm.response.to.have.status(201);",
													"        pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json sem erro', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validação de atributos",
													"    const atributos = ['message', '_id'];",
													"",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    })",
													"    //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
													"    })",
													"}",
													"",
													"//-----------------------status code 400----------------------",
													"if ( stats == 'Bad Request'){",
													"    //status de erro",
													"    pm.test(\"Status code e 400\", function () {",
													"        pm.response.to.have.status(400);",
													"        //pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        //pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validacao de atributos",
													"     const atributos = ['message', 'item'];",
													"",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    });",
													"     //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"Produto não possui quantidade suficiente\");",
													"    })",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"produtos\": [{\n    \"idProduto\": \"{{item_id}}\",\n    \"quantidade\": \"10\"\n  }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								},
								{
									"name": "FU01-04 listar carrinho cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//--------------------------------------testes-----------------------------",
													"//----------------------------------status 200-----------------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['quantidade', 'carrinhos'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//o numero da propriedade quantidade condiz com o tamanho da lista",
													"pm.test(\"A quantidade corresponde a quantidade de carrinhos\", function (){",
													"    pm.expect(response.carrinhos.length).to.be.equal(response.quantidade)",
													"});",
													"//teste de propriedades dos carrinhos e dos itens dentro dos carrinhos",
													"pm.test('Resposta contem todos os atributos dos carrinhos', function (){",
													"    const carr_list = [\"produtos\", \"precoTotal\", \"quantidadeTotal\", \"idUsuario\", \"_id\"];",
													"    const prod_list = [\"idProduto\", \"quantidade\", \"precoUnitario\"];",
													"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-edd08e85-3304-4b1c-a5b1-27f413fe89c9",
													"   response.carrinhos.forEach((carrinho) => {",
													"       //console.log (carrinho.produtos);",
													"       pm.expect(carrinho).to.have.all.keys(carr_list);",
													"       carrinho.produtos.forEach((produto) => {",
													"           pm.expect(produto).to.have.all.keys(prod_list);",
													"       })",
													"   });",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											],
											"query": [
												{
													"key": "_id",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "precoTotal",
													"value": "73417346",
													"disabled": true
												},
												{
													"key": "quantidadeTotal",
													"value": "80996386",
													"disabled": true
												},
												{
													"key": "idUsuario",
													"value": "nostrud laboris ad",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FU01-05 concluir compra",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"",
													"//-----------------------------------testes-----------------------------",
													"//---------------------------------status 200---------------------------",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//teste da resposta contem menssagem",
													"pm.test(\"contem menssagem\", function () {",
													"    pm.expect(response[\"message\"]).to.exist",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/carrinhos/concluir-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"concluir-compra"
											]
										}
									},
									"response": []
								}
							],
							"description": "Nesta pasta seguem as API's requests de um fluxo1 de de usuário já cadastrado realizar uma compra, retirando do estoque os itens."
						},
						{
							"name": "fluxo2-usuario-Desistencia",
							"item": [
								{
									"name": "FU02-01 login - usuário existente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------------testes--------------------------",
													"//-----------------------------status 200------------------------",
													"//status code é 200",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message', 'authorization'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");",
													"})",
													"//tamanho do token bearer certo",
													"pm.test('tamanho do token bearer esta correto', function() {",
													"    pm.expect(pm.response.json().authorization.length).to.be.equal(198);",
													"})",
													"",
													"//-----------------------configurando variaveis de ambiente ----------------------",
													"pm.environment.set(\"token-bear\", response.authorization.slice(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"leonardo@test.com\",\n  \"password\": \"12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "FU02-02 listar itens da loja",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"let tamanho = pm.response.json().produtos.length;",
													"",
													"//declaracao de funcoes",
													"function getRandomInt(max) {     //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random",
													"    return Math.floor(Math.random() * max);",
													"}",
													"",
													"//---------------------------testes -----------------------------",
													"//------------------------status 200 -----------------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['quantidade', 'produtos'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//confirmar se a quantidade demonstrada pelo body é igual a quantidade real",
													"pm.test(\"A quantidade de produtos corresponde a quantidade de itens\", function (){",
													"    pm.expect(response.produtos.length).to.be.equal(response.quantidade)",
													"});",
													"//validacao de atributos dos produtos",
													"const prod_list = ['nome', 'preco', 'descricao', 'quantidade', '_id'];",
													"",
													"pm.test('Resposta contem todos os atributos dos produtos', function (){",
													"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-edd08e85-3304-4b1c-a5b1-27f413fe89c9",
													"   response.produtos.forEach((produto) => {",
													"       pm.expect(produto).to.have.all.keys(prod_list);",
													"   });",
													"    ",
													"});",
													"",
													"",
													"",
													"",
													"//-----------------configuracao de variaveis de ambiente ---------------------------------",
													"//pega um id de um produto aleatorio da loja",
													"const rad = getRandomInt(tamanho -1);",
													"const prop = response.produtos[rad];",
													"//console.log(prop);",
													"pm.environment.set(\"item_id\", prop._id);",
													"//console.log(prop._id);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											],
											"query": [
												{
													"key": "_id",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "nome",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "preco",
													"value": "73417346",
													"disabled": true
												},
												{
													"key": "descricao",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "quantidade",
													"value": "80996386",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FU02-03 cadastrar carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"const stats = pm.response.status;",
													"//console.log (stats);",
													"",
													"//------------------------testes------------------------",
													"",
													"//----------------------status code 201 -------------------",
													"if(   stats == 'Created'){",
													"    //Item criado com sucesso",
													"    pm.test(\"Status code e 201 e nao erro\", function () {",
													"        pm.response.to.have.status(201);",
													"        pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json sem erro', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validação de atributos",
													"    const atributos = ['message', '_id'];",
													"",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    })",
													"    //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
													"    })",
													"}",
													"",
													"//-----------------------status code 400----------------------",
													"if ( stats == 'Bad Request'){",
													"    //status de erro",
													"    pm.test(\"Status code e 400\", function () {",
													"        pm.response.to.have.status(400);",
													"        //pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        //pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validacao de atributos",
													"     const atributos = ['message', 'item'];",
													"",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    });",
													"     //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"Produto não possui quantidade suficiente\");",
													"    })",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"produtos\": [{\n    \"idProduto\": \"{{item_id}}\",\n    \"quantidade\": \"10\"\n  }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								},
								{
									"name": "FU02-04 listar carrinho cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//--------------------------------------testes-----------------------------",
													"//----------------------------------status 200-----------------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['quantidade', 'carrinhos'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//o numero da propriedade quantidade condiz com o tamanho da lista",
													"pm.test(\"A quantidade corresponde a quantidade de carrinhos\", function (){",
													"    pm.expect(response.carrinhos.length).to.be.equal(response.quantidade)",
													"});",
													"//teste de propriedades dos carrinhos e dos itens dentro dos carrinhos",
													"pm.test('Resposta contem todos os atributos dos carrinhos', function (){",
													"    const carr_list = [\"produtos\", \"precoTotal\", \"quantidadeTotal\", \"idUsuario\", \"_id\"];",
													"    const prod_list = [\"idProduto\", \"quantidade\", \"precoUnitario\"];",
													"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-edd08e85-3304-4b1c-a5b1-27f413fe89c9",
													"   response.carrinhos.forEach((carrinho) => {",
													"       //console.log (carrinho.produtos);",
													"       pm.expect(carrinho).to.have.all.keys(carr_list);",
													"       carrinho.produtos.forEach((produto) => {",
													"           pm.expect(produto).to.have.all.keys(prod_list);",
													"       })",
													"   });",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											],
											"query": [
												{
													"key": "_id",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "precoTotal",
													"value": "73417346",
													"disabled": true
												},
												{
													"key": "quantidadeTotal",
													"value": "80996386",
													"disabled": true
												},
												{
													"key": "idUsuario",
													"value": "nostrud laboris ad",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FU02-05 Excluir carrinho e retornar produtos para estoque",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//---------------------------------testes----------------------------",
													"//------------------------------status 200 --------------------------",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//teste da resposta contem menssagem",
													"pm.test(\"contem menssagem e texto de exclusão\", function () {",
													"    pm.expect(response[\"message\"]).to.exist",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso. Estoque dos produtos reabastecido\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseURL}}/carrinhos/cancelar-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"cancelar-compra"
											]
										},
										"description": "Ao cancelar uma compra o carrinho é excluído e o estoque dos produtos desse carrinho é reabastecido.\nO carrinho excluído será o vinculado ao usuário do `token` utilizado.\n"
									},
									"response": [
										{
											"name": "Registro excluído com sucesso | Não foi encontrado carrinho para esse usuário",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos",
														"cancelar-compra"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro excluído com sucesso | Não foi encontrado carrinho para esse usuário\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos",
														"cancelar-compra"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										}
									]
								}
							],
							"description": "Nesta pasta seguem as API's requests de um fluxo2 de de usuário, quando um usuário já cadastrado realiza a criação do carrinho mas desiste da compra, repondo os itens para a loja."
						},
						{
							"name": "fluxo3-usuario-novo-compra",
							"item": [
								{
									"name": "FU03-01 Cadastrar usuário",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const json_result = pm.response.json();",
													"",
													"//-----------------------------------testes---------------------------------",
													"//--------------------------------status 201--------------------------------",
													"//Verifica se o status code é 201",
													"pm.test(\"Status code is 201 e nao erro\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//verifica se as propriedades estão presentes",
													"const propeties = [\"message\", \"_id\"];",
													"propeties.forEach((prop) => {",
													"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
													"        pm.expect(json_result[prop]).to.exist;",
													"    })",
													"});",
													"//verifica se o texto enviado é o correto",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
													"});",
													"//console.log(json_result._id.length);",
													"//Tamanho da propriedade _id",
													"pm.test(\"Tamanho do id e o esperado\", function() {",
													"    pm.expect(json_result._id.length).to.be.eql(16);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//declaracao de variaveis e listas",
													"const primeiroNome = [\"Leonardo\", \"Leandro\", \"Maria\", \"Joao\", \"Lucas\", \"Manoel\", \"luiza\", \"Antonio\", \"Ester\", \"Tifany\", \"Helena\", \"Clarrise\", \"Pedro\", \"Carlos\", 524829, \"Beto\", \"Roberto\", \"Beatriz\", \"Alice\"];",
													"const sobreNome = [\"Andrade\", \"Paucar\", \"Oliveira\", \"Silva\", \"Carvalho\", \"Rocha\", \"Souza\", \"Martins\", \"castro\", \"Rodrigues\", \"Tavares\", 16458, \"Maia\", \"Betanea\", \"Silveira\"];",
													"const provedor = [\"@gmail.com\", \"@yahoo.com.br\", \"@outlook.com\", \"@hotmail.com\"];",
													"//pegando itens aleatorios das listas e armazenando nas variaveis",
													"let nome1 = primeiroNome[_.random(primeiroNome.length -1)];",
													"let nome2 = sobreNome[_.random(sobreNome.length -1)];",
													"let prov = provedor[_.random(provedor.length -1)];",
													"//concatenando os itens aleatorios",
													"let nomeCompleto = nome1 + \" \" + nome2;",
													"let email = nome1 + nome2 + prov",
													"",
													"//---------------------------------configurando as variaveis de ambiente --------------------------------",
													"pm.environment.set(\"email_client1\", email);",
													"pm.environment.set(\"cliente1\", nomeCompleto);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"{{cliente1}}\",\n  \"email\": \"{{email_client1}}\",\n  \"password\": \"{{psswd_client1}}\",\n  \"administrador\": \"false\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												""
											]
										},
										"description": "Não é permitido cadastrar usuário com email já utilizado"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usuarios",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "E-mail já cadastrado",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usuarios",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
										}
									]
								},
								{
									"name": "FU03-02 login - usuário existente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------------testes--------------------------",
													"//-----------------------------status 200------------------------",
													"//status code é 200",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message', 'authorization'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");",
													"});",
													"//tamanho do token bearer certo",
													"/*",
													"pm.test('tamanho do token bearer esta correto', function() {",
													"    pm.expect(pm.response.json().authorization.length).to.be.equal(198);",
													"})",
													"*/",
													"",
													"//----------------------------configurando variaveis de ambiente -----------------------------",
													"pm.environment.set(\"token-bear\", response.authorization.slice(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{email_client1}}\",\n  \"password\": \"12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "FU03-03 listar itens da loja",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"let tamanho = pm.response.json().produtos.length;",
													"",
													"//declaracao de funcoes",
													"function getRandomInt(max) {     //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random",
													"    return Math.floor(Math.random() * max);",
													"}",
													"",
													"//---------------------------testes -----------------------------",
													"//------------------------status 200 -----------------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['quantidade', 'produtos'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//confirmar se a quantidade demonstrada pelo body é igual a quantidade real",
													"pm.test(\"A quantidade de produtos corresponde a quantidade de itens\", function (){",
													"    pm.expect(response.produtos.length).to.be.equal(response.quantidade)",
													"});",
													"//validacao de atributos dos produtos",
													"const prod_list = ['nome', 'preco', 'descricao', 'quantidade', '_id'];",
													"",
													"pm.test('Resposta contem todos os atributos dos produtos', function (){",
													"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-edd08e85-3304-4b1c-a5b1-27f413fe89c9",
													"   response.produtos.forEach((produto) => {",
													"       pm.expect(produto).to.have.all.keys(prod_list);",
													"   });",
													"    ",
													"});",
													"",
													"",
													"",
													"",
													"//-----------------configuracao de variaveis de ambiente ---------------------------------",
													"//pega um id de um produto aleatorio da loja",
													"const rad = getRandomInt(tamanho -1);",
													"const prop = response.produtos[rad];",
													"//console.log(prop);",
													"pm.environment.set(\"item_id\", prop._id);",
													"//console.log(prop._id);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											],
											"query": [
												{
													"key": "_id",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "nome",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "preco",
													"value": "73417346",
													"disabled": true
												},
												{
													"key": "descricao",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "quantidade",
													"value": "80996386",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FU03-04 cadastrar carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"const stats = pm.response.status;",
													"//console.log (stats);",
													"",
													"//------------------------testes------------------------",
													"",
													"//----------------------status code 201 -------------------",
													"if(   stats == 'Created'){",
													"    //Item criado com sucesso",
													"    pm.test(\"Status code e 201 e nao erro\", function () {",
													"        pm.response.to.have.status(201);",
													"        pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json sem erro', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validação de atributos",
													"    const atributos = ['message', '_id'];",
													"",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    })",
													"    //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
													"    })",
													"}",
													"",
													"//-----------------------status code 400----------------------",
													"if ( stats == 'Bad Request'){",
													"    //status de erro",
													"    pm.test(\"Status code e 400\", function () {",
													"        pm.response.to.have.status(400);",
													"        //pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        //pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validacao de atributos",
													"     const atributos = ['message', 'item'];",
													"",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    });",
													"     //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"Produto não possui quantidade suficiente\");",
													"    })",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"produtos\": [{\n    \"idProduto\": \"{{item_id}}\",\n    \"quantidade\": \"10\"\n  }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								},
								{
									"name": "FU03-05 listar carrinho cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//--------------------------------------testes-----------------------------",
													"//----------------------------------status 200-----------------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['quantidade', 'carrinhos'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//o numero da propriedade quantidade condiz com o tamanho da lista",
													"pm.test(\"A quantidade corresponde a quantidade de carrinhos\", function (){",
													"    pm.expect(response.carrinhos.length).to.be.equal(response.quantidade)",
													"});",
													"//teste de propriedades dos carrinhos e dos itens dentro dos carrinhos",
													"pm.test('Resposta contem todos os atributos dos carrinhos', function (){",
													"    const carr_list = [\"produtos\", \"precoTotal\", \"quantidadeTotal\", \"idUsuario\", \"_id\"];",
													"    const prod_list = [\"idProduto\", \"quantidade\", \"precoUnitario\"];",
													"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-edd08e85-3304-4b1c-a5b1-27f413fe89c9",
													"   response.carrinhos.forEach((carrinho) => {",
													"       //console.log (carrinho.produtos);",
													"       pm.expect(carrinho).to.have.all.keys(carr_list);",
													"       carrinho.produtos.forEach((produto) => {",
													"           pm.expect(produto).to.have.all.keys(prod_list);",
													"       })",
													"   });",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											],
											"query": [
												{
													"key": "_id",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "precoTotal",
													"value": "73417346",
													"disabled": true
												},
												{
													"key": "quantidadeTotal",
													"value": "80996386",
													"disabled": true
												},
												{
													"key": "idUsuario",
													"value": "nostrud laboris ad",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FU03-06 concluir compra",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"",
													"//-----------------------------------testes-----------------------------",
													"//---------------------------------status 200---------------------------",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//teste da resposta contem menssagem",
													"pm.test(\"contem menssagem\", function () {",
													"    pm.expect(response[\"message\"]).to.exist",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseURL}}/carrinhos/concluir-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"concluir-compra"
											]
										}
									},
									"response": []
								},
								{
									"name": "FU03-07 Listar usuários cadastrados",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"const usu = response.usuarios;",
													"",
													"//-------------------------------testes ------------------------------",
													"//----------------------------status 200 -----------------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['quantidade', 'usuarios'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"//Cada usuario possui suas propriedades",
													"const usu_list = ['nome', 'email', 'password', 'administrador', '_id'];",
													"",
													"pm.test('Usuarios contem todos os atributos', function (){",
													"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-edd08e85-3304-4b1c-a5b1-27f413fe89c9",
													"   response.usuarios.forEach((usu) => {",
													"       pm.expect(usu).to.have.all.keys(usu_list);",
													"   });",
													"    ",
													"});",
													"",
													"",
													"//------------------------configurando variaveis de ambiente -------------",
													"//pegar o ultimo usuario cadastrado e gravar a id dele",
													"usu.forEach(usuario => {",
													"    //console.log(pm.environment.get(\"cliente1\"))",
													"    if( usuario.nome == (pm.environment.get(\"cliente1\"))) {",
													"        //console.log(\"entrei no if\");",
													"        pm.environment.set(\"client_id\", usuario._id);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true,
											"user-agent": true,
											"accept": true,
											"accept-encoding": true,
											"connection": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											],
											"query": [
												{
													"key": "_id",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "nome",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "email",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "password",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "administrador",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": [
										{
											"name": "Lista de usuários",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usuarios?_id=nostrud laboris ad&nome=nostrud laboris ad&email=nostrud laboris ad&password=nostrud laboris ad&administrador=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios"
													],
													"query": [
														{
															"key": "_id",
															"value": "nostrud laboris ad"
														},
														{
															"key": "nome",
															"value": "nostrud laboris ad"
														},
														{
															"key": "email",
															"value": "nostrud laboris ad"
														},
														{
															"key": "password",
															"value": "nostrud laboris ad"
														},
														{
															"key": "administrador",
															"value": "false"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"quantidade\": 1,\n  \"usuarios\": [\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    },\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "FU03-08 Excluir usuário",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//----------------------------------testes----------------------------------",
													"//---------------------------------status 200 ------------------------------",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//teste da resposta contem menssagem",
													"pm.test(\"contem menssagem e texto de exclusão\", function () {",
													"    pm.expect(response[\"message\"]).to.exist",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseURL}}/usuarios/:_id",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{client_id}}",
													"description": "(Required) ID do usuário"
												}
											]
										},
										"description": "Não é permitido excluir usuário com carrinho."
									},
									"response": [
										{
											"name": "Registro excluído com sucesso | Nenhum registro excluído",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do usuário"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
										},
										{
											"name": "Usuário com carrinho cadastrado",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do usuário"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Não é permitido excluir usuário com carrinho cadastrado\",\n  \"idCarrinho\": \"qbMqntef4iTOwWfg\"\n}"
										}
									]
								}
							],
							"description": "Nesta pasta seguem as API's requests de um fluxo3 de de usuário, onde o usuário não está cadastrado, realiza o cadastro compra na loja retirando do estoque os produtos, e no final o usuário é deletado para não encher o banco de dados da loja."
						},
						{
							"name": "fluxo4-usuario-brecha",
							"item": [
								{
									"name": "FU04-01 Cadastrar usuário",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const json_result = pm.response.json();",
													"",
													"//-----------------------------------testes---------------------------------",
													"//--------------------------------status 201--------------------------------",
													"//Verifica se o status code é 201",
													"pm.test(\"Status code is 201 e nao erro\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//verifica se as propriedades estão presentes",
													"const propeties = [\"message\", \"_id\"];",
													"propeties.forEach((prop) => {",
													"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
													"        pm.expect(json_result[prop]).to.exist;",
													"    })",
													"});",
													"//verifica se o texto enviado é o correto",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
													"});",
													"//console.log(json_result._id.length);",
													"//Tamanho da propriedade _id",
													"pm.test(\"Tamanho do id e o esperado\", function() {",
													"    pm.expect(json_result._id.length).to.be.eql(16);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//declaracao de variaveis e listas",
													"const primeiroNome = [\"Leonardo\", \"Leandro\", \"Maria\", \"Joao\", \"Lucas\", \"Manoel\", \"luiza\", \"Antonio\", \"Ester\", \"Tifany\", \"Helena\", \"Clarrise\", \"Pedro\", \"Carlos\", 524829, \"Beto\", \"Roberto\", \"Beatriz\", \"Alice\"];",
													"const sobreNome = [\"Andrade\", \"Paucar\", \"Oliveira\", \"Silva\", \"Carvalho\", \"Rocha\", \"Souza\", \"Martins\", \"castro\", \"Rodrigues\", \"Tavares\", 16458, \"Maia\", \"Betanea\", \"Silveira\"];",
													"const provedor = [\"@gmail.com\", \"@yahoo.com.br\", \"@outlook.com\", \"@hotmail.com\"];",
													"//pegando itens aleatorios das listas e armazenando nas variaveis",
													"let nome1 = primeiroNome[_.random(primeiroNome.length -1)];",
													"let nome2 = sobreNome[_.random(sobreNome.length -1)];",
													"let prov = provedor[_.random(provedor.length -1)];",
													"//concatenando os itens aleatorios",
													"let nomeCompleto = nome1 + \" \" + nome2;",
													"let email = nome1 + nome2 + prov",
													"",
													"//---------------------------------configurando as variaveis de ambiente --------------------------------",
													"pm.environment.set(\"email_client1\", email);",
													"pm.environment.set(\"cliente1\", nomeCompleto);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"{{cliente1}}\",\n  \"email\": \"{{email_client1}}\",\n  \"password\": \"{{psswd_client1}}\",\n  \"administrador\": \"false\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												""
											]
										},
										"description": "Não é permitido cadastrar usuário com email já utilizado"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usuarios",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "E-mail já cadastrado",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usuarios",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
										}
									]
								},
								{
									"name": "FU04-02 login - usuário existente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------------testes--------------------------",
													"//-----------------------------status 200------------------------",
													"//status code é 200",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message', 'authorization'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");",
													"});",
													"//tamanho do token bearer certo",
													"/*",
													"pm.test('tamanho do token bearer esta correto', function() {",
													"    pm.expect(pm.response.json().authorization.length).to.be.equal(198);",
													"})",
													"*/",
													"",
													"//----------------------------configurando variaveis de ambiente -----------------------------",
													"pm.environment.set(\"token-bear\", response.authorization.slice(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{email_client1}}\",\n  \"password\": \"12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "FU04-03 Cadastrar produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//--------------------------------------------testes----------------------------------",
													"//-------------------------------------------status 403-------------------------------",
													"//teste de status correto",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.be.error;",
													"});",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//Teste de atributos",
													"const atributos = ['message'];",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//teste de texto de erro correto",
													"pm.test(\"menssagem correta de erro\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\")",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								},
								{
									"name": "FU04-04 listar itens da loja",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"let tamanho = pm.response.json().produtos.length;",
													"",
													"//declaracao de funcoes",
													"function getRandomInt(max) {     //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random",
													"    return Math.floor(Math.random() * max);",
													"}",
													"",
													"//---------------------------testes -----------------------------",
													"//------------------------status 200 -----------------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['quantidade', 'produtos'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//confirmar se a quantidade demonstrada pelo body é igual a quantidade real",
													"pm.test(\"A quantidade de produtos corresponde a quantidade de itens\", function (){",
													"    pm.expect(response.produtos.length).to.be.equal(response.quantidade)",
													"});",
													"//validacao de atributos dos produtos",
													"const prod_list = ['nome', 'preco', 'descricao', 'quantidade', '_id'];",
													"",
													"pm.test('Resposta contem todos os atributos dos produtos', function (){",
													"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-edd08e85-3304-4b1c-a5b1-27f413fe89c9",
													"   response.produtos.forEach((produto) => {",
													"       pm.expect(produto).to.have.all.keys(prod_list);",
													"   });",
													"    ",
													"});",
													"",
													"",
													"",
													"",
													"//-----------------configuracao de variaveis de ambiente ---------------------------------",
													"//pega um id de um produto aleatorio da loja",
													"const rad = getRandomInt(tamanho -1);",
													"const prop = response.produtos[rad];",
													"//console.log(prop);",
													"pm.environment.set(\"item_id\", prop._id);",
													"//console.log(prop._id);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											],
											"query": [
												{
													"key": "_id",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "nome",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "preco",
													"value": "73417346",
													"disabled": true
												},
												{
													"key": "descricao",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "quantidade",
													"value": "80996386",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FU04-05 Editar produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//---------------------------------------testes---------------------------------",
													"//-------------------------------------status 403-------------------------------",
													"//teste de status correto",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.be.error;",
													"});",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//teste de atributos da resposta",
													"const atributos = ['message'];",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"//teste de texto de erro correto",
													"pm.test(\"menssagem correta de erro\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\")",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"nome\": \"Jogo xbox - The Elder scrolls Skyrim\",\n\"preco\": 470,\n\"descricao\": \"Jogo de xbox360\",\n\"quantidade\": 332\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/:_id",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{item_id}}",
													"description": "(Required) ID do produto"
												}
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
									},
									"response": [
										{
											"name": "Alterado com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
										},
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								},
								{
									"name": "FU04-06 Excluir produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//--------------------------------------------testes--------------------------------",
													"//------------------------------------------status 403------------------------------",
													"//teste de status correto",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.be.error;",
													"});",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//teste de atributos da resposta",
													"const atributos = ['message'];",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//teste de texto de erro correto",
													"pm.test(\"menssagem correta de erro\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\")",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseURL}}/produtos/:_id",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{item_id}}",
													"description": "(Required) ID do produto"
												}
											]
										},
										"description": "Não é permitido excluir produto que faz parte de carrinho."
									},
									"response": [
										{
											"name": "Registro excluído com sucesso | Nenhum registro excluído",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
										},
										{
											"name": "Produto faz parte de carrinho",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Não é permitido excluir produto que faz parte de carrinho\",\n  \"idCarrinho\": [\n    \"qbMqntef4iTOwWfg, yILJY1eaAUC6hyRc\",\n    \"qbMqntef4iTOwWfg, yILJY1eaAUC6hyRc\"\n  ]\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								},
								{
									"name": "FU04-07 Listar usuários cadastrados",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"const usu = response.usuarios;",
													"",
													"//--------------------------------------------testes--------------------------------",
													"//--------------------------------------status 200 ----------------------------------",
													"//Teste de erro correto",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403); //falha primeiro encontrada por @amandaPaz",
													"    pm.response.to.be.error;",
													"});",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['quantidade', 'usuarios'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"",
													"//validacao de atributos que a resposta nao deve ter",
													"const usu_list = ['email', 'password', 'administrador', '_id'];",
													"",
													"pm.test('Usuarios nao possui dados sensiveis', function (){",
													"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); //pm.expect(jsonData.form.customerName).to.not.include      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-ff6b5461-541e-4d40-9b8f-f9217b6ed99e",
													"   response.usuarios.forEach((usu) => {",
													"       pm.expect(usu).to.not.include.all.keys(usu_list);",
													"   });",
													"    ",
													"});",
													"",
													"//----------------------------configurando variaveis de ambiente -----------------------------",
													"//pegar o ultimo usuario cadastrado e gravar a id dele",
													"usu.forEach(usuario => {",
													"    //console.log(pm.environment.get(\"cliente1\"))",
													"    if( usuario.nome == (pm.environment.get(\"cliente1\"))) {",
													"        //console.log(\"entrei no if\");",
													"        pm.environment.set(\"client_id\", usuario._id);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true,
											"user-agent": true,
											"accept": true,
											"accept-encoding": true,
											"connection": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											],
											"query": [
												{
													"key": "_id",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "nome",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "email",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "password",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "administrador",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": [
										{
											"name": "Lista de usuários",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usuarios?_id=nostrud laboris ad&nome=nostrud laboris ad&email=nostrud laboris ad&password=nostrud laboris ad&administrador=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios"
													],
													"query": [
														{
															"key": "_id",
															"value": "nostrud laboris ad"
														},
														{
															"key": "nome",
															"value": "nostrud laboris ad"
														},
														{
															"key": "email",
															"value": "nostrud laboris ad"
														},
														{
															"key": "password",
															"value": "nostrud laboris ad"
														},
														{
															"key": "administrador",
															"value": "false"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"quantidade\": 1,\n  \"usuarios\": [\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    },\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "FU04-08 Excluir usuário",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//----------------------------------testes----------------------------------",
													"//---------------------------------status 200 ------------------------------",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//teste da resposta contem menssagem",
													"pm.test(\"contem menssagem e texto de exclusão\", function () {",
													"    pm.expect(response[\"message\"]).to.exist",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseURL}}/usuarios/:_id",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{client_id}}",
													"description": "(Required) ID do usuário"
												}
											]
										},
										"description": "Não é permitido excluir usuário com carrinho."
									},
									"response": [
										{
											"name": "Registro excluído com sucesso | Nenhum registro excluído",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do usuário"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
										},
										{
											"name": "Usuário com carrinho cadastrado",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usuarios/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do usuário"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Não é permitido excluir usuário com carrinho cadastrado\",\n  \"idCarrinho\": \"qbMqntef4iTOwWfg\"\n}"
										}
									]
								}
							],
							"description": "Nesta pasta seguem as API's requests de um fluxo4 de de usuário, onde sem permissões administrativas ele tenta alterar itens da loja."
						}
					]
				},
				{
					"name": "regressivos",
					"item": [
						{
							"name": "usuarios",
							"item": [
								{
									"name": "Cadastro auto",
									"item": [
										{
											"name": "email-attack",
											"item": [
												{
													"name": "RU01-01 Cadastrar usuário",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//declaracao de variaveis",
																	"const response = pm.response.json();",
																	"const stats = pm.response.status;",
																	"//console.log (stats);",
																	"",
																	"//------------------------testes------------------------",
																	"",
																	"//----------------------status code 201 -------------------",
																	"if(   stats == 'Created'){",
																	"    //Item criado com sucesso",
																	"    console.log('Olha a merda que passou: ' + pm.environment.get(\"email_client1\") );",
																	"    pm.test(\"Status code e 201 e nao erro\", function () {",
																	"        pm.response.to.have.status(201);",
																	"        pm.response.to.not.be.error; ",
																	"    });",
																	"    //corpo de resposta presente veio e e json",
																	"    pm.test('Corpo de resposta json sem erro', function () {",
																	"        pm.response.to.have.jsonBody(); ",
																	"        pm.response.to.not.have.jsonBody(\"error\"); ",
																	"    });",
																	"    //validação de atributos",
																	"    const atributos = ['message', '_id'];",
																	"",
																	"    atributos.forEach((atributo) => {",
																	"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
																	"            pm.expect(pm.response.json()[atributo]).to.exist;",
																	"        })",
																	"    })",
																	"    //resposta de validacao correta",
																	"    pm.test(\"Menssagem correta\", function() {",
																	"        pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
																	"    })",
																	"}",
																	"",
																	"//-----------------------status code 400----------------------",
																	"if ( stats == 'Bad Request'){",
																	"    //console.log('Olha a merda que nao passou: ' + pm.environment.get(\"email_client1\") );",
																	"    //status de erro",
																	"    pm.test(\"Status code e 400\", function () {",
																	"        pm.response.to.have.status(400);",
																	"        //pm.response.to.not.be.error; ",
																	"    });",
																	"    //corpo de resposta presente veio e e json",
																	"    pm.test('Corpo de resposta json', function () {",
																	"        pm.response.to.have.jsonBody(); ",
																	"        //pm.response.to.not.have.jsonBody(\"error\"); ",
																	"    });",
																	"    //validacao de atributos",
																	"     const atributos = ['email'];",
																	"",
																	"    atributos.forEach((atributo) => {",
																	"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
																	"            pm.expect(pm.response.json()[atributo]).to.exist;",
																	"        })",
																	"    });",
																	"     //resposta de validacao correta",
																	"    pm.test(\"Menssagem correta\", function() {",
																	"        pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");",
																	"    })",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//declaracao de variaveis e listas",
																	"const primeiroNome = [\"%\", \"@\", \"(\", \"{\", \"[\", \"`\", 1234, \"\",\" \", \" \", \"\", \" \"];",
																	"const sobreNome = [\"%\", \"@\", \"(\", \"{\", \"[\", \"`\", 1234, \"\", \" \", \" \", \"\", \" \"];",
																	"const provedor = [\"%\", \"*\", \"(\", \"{\", \"[\", \"`\", 1234, \"@\", \"@.\", \"@.co\", \"@.com\", \".c\", \"@zueira.yt\", \"@zueira.copaQuatar\", \"@eleicoes.2022\", \"\", \" \", \" \", \"\", \" \"];",
																	"//pegando itens aleatorios das listas e armazenando nas variaveis",
																	"let nome1 = primeiroNome[_.random(primeiroNome.length -1)];",
																	"let nome2 = sobreNome[_.random(sobreNome.length -1)];",
																	"let prov = provedor[_.random(provedor.length -1)];",
																	"//concatenando os itens aleatorios",
																	"let nomeCompleto = nome1 + \" \" + nome2;",
																	"let email = nome1 + nome2 + prov",
																	"",
																	"//---------------------------------configurando as variaveis de ambiente --------------------------------",
																	"pm.environment.set(\"email_client1\", email);",
																	"pm.environment.set(\"cliente1\", nomeCompleto);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"nome\": \"{{cliente1}}\",\n  \"email\": \"{{email_client1}}\",\n  \"password\": \"{{psswd_client1}}\",\n  \"administrador\": \"true\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseURL}}/usuarios/",
															"host": [
																"{{baseURL}}"
															],
															"path": [
																"usuarios",
																""
															]
														},
														"description": "Não é permitido cadastrar usuário com email já utilizado"
													},
													"response": [
														{
															"name": "Cadastro com sucesso",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
														},
														{
															"name": "E-mail já cadastrado",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
														}
													]
												},
												{
													"name": "RU01-02 Listar usuários cadastrados",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//declaracao de variaveis",
																	"const response = pm.response.json();",
																	"const usu = response.usuarios;",
																	"",
																	"//-------------------------------testes ------------------------------",
																	"//----------------------------status 200 -----------------------------",
																	"//Item criado com sucesso",
																	"pm.test(\"Status code e 200 e nao erro\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.response.to.not.be.error; ",
																	"});",
																	"//corpo de resposta presente veio e e json",
																	"pm.test('Corpo de resposta json sem erro', function () {",
																	"    pm.response.to.have.jsonBody(); ",
																	"    pm.response.to.not.have.jsonBody(\"error\"); ",
																	"});",
																	"//validação de atributos",
																	"const atributos = ['quantidade', 'usuarios'];",
																	"",
																	"atributos.forEach((atributo) => {",
																	"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
																	"        pm.expect(pm.response.json()[atributo]).to.exist;",
																	"    })",
																	"});",
																	"//Cada usuario possui suas propriedades",
																	"const usu_list = ['nome', 'email', 'password', 'administrador', '_id'];",
																	"",
																	"pm.test('Usuarios contem todos os atributos', function (){",
																	"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-edd08e85-3304-4b1c-a5b1-27f413fe89c9",
																	"   response.usuarios.forEach((usu) => {",
																	"       pm.expect(usu).to.have.all.keys(usu_list);",
																	"   });",
																	"    ",
																	"});",
																	"",
																	"",
																	"//------------------------configurando variaveis de ambiente -------------",
																	"//pegar o ultimo usuario cadastrado e gravar a id dele",
																	"usu.forEach(usuario => {",
																	"    //console.log(pm.environment.get(\"cliente1\"))",
																	"    if( usuario.nome == (pm.environment.get(\"cliente1\"))) {",
																	"        //console.log(\"entrei no if\");",
																	"        pm.environment.set(\"client_id\", usuario._id);",
																	"    }",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"host": true,
															"user-agent": true,
															"accept": true,
															"accept-encoding": true,
															"connection": true
														}
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{baseURL}}/usuarios",
															"host": [
																"{{baseURL}}"
															],
															"path": [
																"usuarios"
															],
															"query": [
																{
																	"key": "_id",
																	"value": "nostrud laboris ad",
																	"disabled": true
																},
																{
																	"key": "nome",
																	"value": "nostrud laboris ad",
																	"disabled": true
																},
																{
																	"key": "email",
																	"value": "nostrud laboris ad",
																	"disabled": true
																},
																{
																	"key": "password",
																	"value": "nostrud laboris ad",
																	"disabled": true
																},
																{
																	"key": "administrador",
																	"value": "false",
																	"disabled": true
																}
															]
														}
													},
													"response": [
														{
															"name": "Lista de usuários",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios?_id=nostrud laboris ad&nome=nostrud laboris ad&email=nostrud laboris ad&password=nostrud laboris ad&administrador=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	],
																	"query": [
																		{
																			"key": "_id",
																			"value": "nostrud laboris ad"
																		},
																		{
																			"key": "nome",
																			"value": "nostrud laboris ad"
																		},
																		{
																			"key": "email",
																			"value": "nostrud laboris ad"
																		},
																		{
																			"key": "password",
																			"value": "nostrud laboris ad"
																		},
																		{
																			"key": "administrador",
																			"value": "false"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"quantidade\": 1,\n  \"usuarios\": [\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    },\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    }\n  ]\n}"
														}
													]
												},
												{
													"name": "RU01-03 Excluir usuário",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//declaracao de variaveis",
																	"const response = pm.response.json();",
																	"",
																	"//----------------------------------testes----------------------------------",
																	"//---------------------------------status 200 ------------------------------",
																	"pm.test(\"Status code e 200 e nao erro\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.response.to.not.be.error; ",
																	"});",
																	"//corpo de resposta presente veio e e json",
																	"pm.test('Corpo de resposta json sem erro', function () {",
																	"    pm.response.to.have.jsonBody(); ",
																	"    pm.response.to.not.have.jsonBody(\"error\"); ",
																	"});",
																	"//teste da resposta contem menssagem",
																	"pm.test(\"contem menssagem e texto de exclusão\", function () {",
																	"    pm.expect(response[\"message\"]).to.exist",
																	"});",
																	"//body da resposta contem:",
																	"pm.test(\"Menssagem correta\", function() {",
																	"    pm.expect(pm.response.text()).to.include(\"Nenhum registro excluído\");",
																	"});",
																	"/*pm.test(\"Menssagem correta\", function() {",
																	"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");",
																	"});",
																	"*/"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseURL}}/usuarios/:_id",
															"host": [
																"{{baseURL}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "{{client_id}}",
																	"description": "(Required) ID do usuário"
																}
															]
														},
														"description": "Não é permitido excluir usuário com carrinho."
													},
													"response": [
														{
															"name": "Registro excluído com sucesso | Nenhum registro excluído",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios/:_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios",
																		":_id"
																	],
																	"variable": [
																		{
																			"key": "_id",
																			"value": "0uxuPY0cbmQhpEz1",
																			"description": "(Required) ID do usuário"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
														},
														{
															"name": "Usuário com carrinho cadastrado",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios/:_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios",
																		":_id"
																	],
																	"variable": [
																		{
																			"key": "_id",
																			"value": "0uxuPY0cbmQhpEz1",
																			"description": "(Required) ID do usuário"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Não é permitido excluir usuário com carrinho cadastrado\",\n  \"idCarrinho\": \"qbMqntef4iTOwWfg\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "psswd-attack",
											"item": [
												{
													"name": "RU02-01 Cadastrar usuário no psswd",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//declaracao de variaveis",
																	"const json_result = pm.response.json();",
																	"",
																	"//-----------------------------------testes---------------------------------",
																	"//--------------------------------status 400--------------------------------",
																	"//Verifica se o status code é 400",
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"    //pm.response.to.not.be.error; ",
																	"});",
																	"//corpo de resposta presente veio e e json",
																	"pm.test('Corpo de resposta json sem erro', function () {",
																	"    pm.response.to.have.jsonBody(); ",
																	"    pm.response.to.not.have.jsonBody(\"error\"); ",
																	"});",
																	"//verifica se as propriedades estão presentes",
																	"const propeties = [\"password\"];",
																	"propeties.forEach((prop) => {",
																	"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
																	"        pm.expect(json_result[prop]).to.exist;",
																	"    })",
																	"});",
																	"//verifica se o texto enviado é o correto",
																	"pm.test(\"Body matches string\", function() {",
																	"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");",
																	"});",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//declaracao de variaveis e listas",
																	"const primeiroNome = [\"Leonardo\", \"Leandro\", \"Maria\", \"Joao\", \"Lucas\", \"Manoel\", \"luiza\", \"Antonio\", \"Ester\", \"Tifany\", \"Helena\", \"Clarrise\", \"Pedro\", \"Carlos\", 524829, \"Beto\", \"Roberto\", \"Beatriz\", \"Alice\"];",
																	"const sobreNome = [\"Andrade\", \"Paucar\", \"Oliveira\", \"Silva\", \"Carvalho\", \"Rocha\", \"Souza\", \"Martins\", \"castro\", \"Rodrigues\", \"Tavares\", 16458, \"Maia\", \"Betanea\", \"Silveira\"];",
																	"const provedor = [\"@gmail.com\", \"@yahoo.com.br\", \"@outlook.com\", \"@hotmail.com\"];",
																	"//pegando itens aleatorios das listas e armazenando nas variaveis",
																	"let nome1 = primeiroNome[_.random(primeiroNome.length -1)];",
																	"let nome2 = sobreNome[_.random(sobreNome.length -1)];",
																	"let prov = provedor[_.random(provedor.length -1)];",
																	"//concatenando os itens aleatorios",
																	"let nomeCompleto = nome1 + \" \" + nome2;",
																	"let email = nome1 + nome2 + prov",
																	"",
																	"//---------------------------------configurando as variaveis de ambiente --------------------------------",
																	"pm.environment.set(\"email_client1\", email);",
																	"pm.environment.set(\"cliente1\", nomeCompleto);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"nome\": \"{{cliente1}}\",\n  \"email\": \"{{email_client1}}\",\n  \"password\": \"\",\n  \"administrador\": \"false\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseURL}}/usuarios/",
															"host": [
																"{{baseURL}}"
															],
															"path": [
																"usuarios",
																""
															]
														},
														"description": "Não é permitido cadastrar usuário com email já utilizado"
													},
													"response": [
														{
															"name": "Cadastro com sucesso",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
														},
														{
															"name": "E-mail já cadastrado",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
														}
													]
												},
												{
													"name": "RU02-02 Cadastrar usuário no psswd space",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//declaracao de variaveis",
																	"const json_result = pm.response.json();",
																	"",
																	"//-----------------------------------testes---------------------------------",
																	"//--------------------------------status 400--------------------------------",
																	"//Verifica se o status code é 400",
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"    //pm.response.to.not.be.error; ",
																	"});",
																	"//corpo de resposta presente veio e e json",
																	"pm.test('Corpo de resposta json sem erro', function () {",
																	"    pm.response.to.have.jsonBody(); ",
																	"    pm.response.to.not.have.jsonBody(\"error\"); ",
																	"});",
																	"//verifica se as propriedades estão presentes",
																	"const propeties = [\"password\"];",
																	"propeties.forEach((prop) => {",
																	"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
																	"        pm.expect(json_result[prop]).to.exist;",
																	"    })",
																	"});",
																	"//verifica se o texto enviado é o correto",
																	"pm.test(\"Body matches string\", function() {",
																	"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//declaracao de variaveis e listas",
																	"const primeiroNome = [\"Leonardo\", \"Leandro\", \"Maria\", \"Joao\", \"Lucas\", \"Manoel\", \"luiza\", \"Antonio\", \"Ester\", \"Tifany\", \"Helena\", \"Clarrise\", \"Pedro\", \"Carlos\", 524829, \"Beto\", \"Roberto\", \"Beatriz\", \"Alice\"];",
																	"const sobreNome = [\"Andrade\", \"Paucar\", \"Oliveira\", \"Silva\", \"Carvalho\", \"Rocha\", \"Souza\", \"Martins\", \"castro\", \"Rodrigues\", \"Tavares\", 16458, \"Maia\", \"Betanea\", \"Silveira\"];",
																	"const provedor = [\"@gmail.com\", \"@yahoo.com.br\", \"@outlook.com\", \"@hotmail.com\"];",
																	"//pegando itens aleatorios das listas e armazenando nas variaveis",
																	"let nome1 = primeiroNome[_.random(primeiroNome.length -1)];",
																	"let nome2 = sobreNome[_.random(sobreNome.length -1)];",
																	"let prov = provedor[_.random(provedor.length -1)];",
																	"//concatenando os itens aleatorios",
																	"let nomeCompleto = nome1 + \" \" + nome2;",
																	"let email = nome1 + nome2 + prov",
																	"",
																	"//---------------------------------configurando as variaveis de ambiente --------------------------------",
																	"pm.environment.set(\"email_client1\", email);",
																	"pm.environment.set(\"cliente1\", nomeCompleto);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"nome\": \"{{cliente1}}\",\n  \"email\": \"{{email_client1}}\",\n  \"password\": \" \",\n  \"administrador\": \"false\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseURL}}/usuarios/",
															"host": [
																"{{baseURL}}"
															],
															"path": [
																"usuarios",
																""
															]
														},
														"description": "Não é permitido cadastrar usuário com email já utilizado"
													},
													"response": [
														{
															"name": "Cadastro com sucesso",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
														},
														{
															"name": "E-mail já cadastrado",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
														}
													]
												},
												{
													"name": "RU02-03 Listar usuários cadastrados",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//declaracao de variaveis",
																	"const response = pm.response.json();",
																	"const usu = response.usuarios;",
																	"",
																	"//-------------------------------testes ------------------------------",
																	"//----------------------------status 200 -----------------------------",
																	"//Item criado com sucesso",
																	"pm.test(\"Status code e 200 e nao erro\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.response.to.not.be.error; ",
																	"});",
																	"//corpo de resposta presente veio e e json",
																	"pm.test('Corpo de resposta json sem erro', function () {",
																	"    pm.response.to.have.jsonBody(); ",
																	"    pm.response.to.not.have.jsonBody(\"error\"); ",
																	"});",
																	"//validação de atributos",
																	"const atributos = ['quantidade', 'usuarios'];",
																	"",
																	"atributos.forEach((atributo) => {",
																	"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
																	"        pm.expect(pm.response.json()[atributo]).to.exist;",
																	"    })",
																	"});",
																	"//Cada usuario possui suas propriedades",
																	"const usu_list = ['nome', 'email', 'password', 'administrador', '_id'];",
																	"",
																	"pm.test('Usuarios contem todos os atributos', function (){",
																	"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-edd08e85-3304-4b1c-a5b1-27f413fe89c9",
																	"   response.usuarios.forEach((usu) => {",
																	"       pm.expect(usu).to.have.all.keys(usu_list);",
																	"   });",
																	"    ",
																	"});",
																	"",
																	"",
																	"//------------------------configurando variaveis de ambiente -------------",
																	"//pegar o ultimo usuario cadastrado e gravar a id dele",
																	"usu.forEach(usuario => {",
																	"    //console.log(pm.environment.get(\"cliente1\"))",
																	"    if( usuario.nome == (pm.environment.get(\"cliente1\"))) {",
																	"        //console.log(\"entrei no if\");",
																	"        pm.environment.set(\"client_id\", usuario._id);",
																	"    }",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"host": true,
															"user-agent": true,
															"accept": true,
															"accept-encoding": true,
															"connection": true
														}
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{baseURL}}/usuarios",
															"host": [
																"{{baseURL}}"
															],
															"path": [
																"usuarios"
															],
															"query": [
																{
																	"key": "_id",
																	"value": "nostrud laboris ad",
																	"disabled": true
																},
																{
																	"key": "nome",
																	"value": "nostrud laboris ad",
																	"disabled": true
																},
																{
																	"key": "email",
																	"value": "nostrud laboris ad",
																	"disabled": true
																},
																{
																	"key": "password",
																	"value": "nostrud laboris ad",
																	"disabled": true
																},
																{
																	"key": "administrador",
																	"value": "false",
																	"disabled": true
																}
															]
														}
													},
													"response": [
														{
															"name": "Lista de usuários",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios?_id=nostrud laboris ad&nome=nostrud laboris ad&email=nostrud laboris ad&password=nostrud laboris ad&administrador=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	],
																	"query": [
																		{
																			"key": "_id",
																			"value": "nostrud laboris ad"
																		},
																		{
																			"key": "nome",
																			"value": "nostrud laboris ad"
																		},
																		{
																			"key": "email",
																			"value": "nostrud laboris ad"
																		},
																		{
																			"key": "password",
																			"value": "nostrud laboris ad"
																		},
																		{
																			"key": "administrador",
																			"value": "false"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"quantidade\": 1,\n  \"usuarios\": [\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    },\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    }\n  ]\n}"
														}
													]
												},
												{
													"name": "RU02-04 Cadastrar usuário no strg",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//declaracao de variaveis",
																	"const json_result = pm.response.json();",
																	"",
																	"//-----------------------------------testes---------------------------------",
																	"//--------------------------------status 400--------------------------------",
																	"//Verifica se o status code é 400",
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"    //pm.response.to.not.be.error; ",
																	"});",
																	"//corpo de resposta presente veio e e json",
																	"pm.test('Corpo de resposta json sem erro', function () {",
																	"    pm.response.to.have.jsonBody(); ",
																	"    pm.response.to.not.have.jsonBody(\"error\"); ",
																	"});",
																	"//verifica se as propriedades estão presentes",
																	"const propeties = [\"password\"];",
																	"propeties.forEach((prop) => {",
																	"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
																	"        pm.expect(json_result[prop]).to.exist;",
																	"    })",
																	"});",
																	"//verifica se o texto enviado é o correto",
																	"pm.test(\"Body matches string\", function() {",
																	"    pm.expect(pm.response.text()).to.include(\"password deve ser uma string\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//declaracao de variaveis e listas",
																	"const primeiroNome = [\"Leonardo\", \"Leandro\", \"Maria\", \"Joao\", \"Lucas\", \"Manoel\", \"luiza\", \"Antonio\", \"Ester\", \"Tifany\", \"Helena\", \"Clarrise\", \"Pedro\", \"Carlos\", 524829, \"Beto\", \"Roberto\", \"Beatriz\", \"Alice\"];",
																	"const sobreNome = [\"Andrade\", \"Paucar\", \"Oliveira\", \"Silva\", \"Carvalho\", \"Rocha\", \"Souza\", \"Martins\", \"castro\", \"Rodrigues\", \"Tavares\", 16458, \"Maia\", \"Betanea\", \"Silveira\"];",
																	"const provedor = [\"@gmail.com\", \"@yahoo.com.br\", \"@outlook.com\", \"@hotmail.com\"];",
																	"//pegando itens aleatorios das listas e armazenando nas variaveis",
																	"let nome1 = primeiroNome[_.random(primeiroNome.length -1)];",
																	"let nome2 = sobreNome[_.random(sobreNome.length -1)];",
																	"let prov = provedor[_.random(provedor.length -1)];",
																	"//concatenando os itens aleatorios",
																	"let nomeCompleto = nome1 + \" \" + nome2;",
																	"let email = nome1 + nome2 + prov",
																	"",
																	"//---------------------------------configurando as variaveis de ambiente --------------------------------",
																	"pm.environment.set(\"email_client1\", email);",
																	"pm.environment.set(\"cliente1\", nomeCompleto);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"nome\": \"{{cliente1}}\",\n  \"email\": \"{{email_client1}}\",\n  \"password\": 123,\n  \"administrador\": \"false\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseURL}}/usuarios/",
															"host": [
																"{{baseURL}}"
															],
															"path": [
																"usuarios",
																""
															]
														},
														"description": "Não é permitido cadastrar usuário com email já utilizado"
													},
													"response": [
														{
															"name": "Cadastro com sucesso",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
														},
														{
															"name": "E-mail já cadastrado",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
														}
													]
												},
												{
													"name": "RU02-05 Cadastrar usuário no stg random",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//declaracao de variaveis",
																	"const json_result = pm.response.json();",
																	"",
																	"//-----------------------------------testes---------------------------------",
																	"//--------------------------------status 400--------------------------------",
																	"//Verifica se o status code é 400",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"    //pm.response.to.not.be.error; ",
																	"});",
																	"//corpo de resposta presente veio e e json",
																	"pm.test('Corpo de resposta json sem erro', function () {",
																	"    pm.response.to.have.jsonBody(); ",
																	"    pm.response.to.not.have.jsonBody(\"error\"); ",
																	"});",
																	"//verifica se as propriedades estão presentes",
																	"const propeties = [\"message\"];",
																	"propeties.forEach((prop) => {",
																	"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
																	"        pm.expect(json_result[prop]).to.exist;",
																	"    })",
																	"});",
																	"//verifica se o texto enviado é o correto",
																	"pm.test(\"Body matches string\", function() {",
																	"    pm.expect(pm.response.text()).to.include(\"Adicione aspas em todos os valores. Para mais informações acesse a issue https://github.com/ServeRest/ServeRest/issues/225\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//declaracao de variaveis e listas",
																	"const primeiroNome = [\"Leonardo\", \"Leandro\", \"Maria\", \"Joao\", \"Lucas\", \"Manoel\", \"luiza\", \"Antonio\", \"Ester\", \"Tifany\", \"Helena\", \"Clarrise\", \"Pedro\", \"Carlos\", 524829, \"Beto\", \"Roberto\", \"Beatriz\", \"Alice\"];",
																	"const sobreNome = [\"Andrade\", \"Paucar\", \"Oliveira\", \"Silva\", \"Carvalho\", \"Rocha\", \"Souza\", \"Martins\", \"castro\", \"Rodrigues\", \"Tavares\", 16458, \"Maia\", \"Betanea\", \"Silveira\"];",
																	"const provedor = [\"@gmail.com\", \"@yahoo.com.br\", \"@outlook.com\", \"@hotmail.com\"];",
																	"//pegando itens aleatorios das listas e armazenando nas variaveis",
																	"let nome1 = primeiroNome[_.random(primeiroNome.length -1)];",
																	"let nome2 = sobreNome[_.random(sobreNome.length -1)];",
																	"let prov = provedor[_.random(provedor.length -1)];",
																	"//concatenando os itens aleatorios",
																	"let nomeCompleto = nome1 + \" \" + nome2;",
																	"let email = nome1 + nome2 + prov",
																	"",
																	"//---------------------------------configurando as variaveis de ambiente --------------------------------",
																	"pm.environment.set(\"email_client1\", email);",
																	"pm.environment.set(\"cliente1\", nomeCompleto);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"nome\": \"{{cliente1}}\",\n  \"email\": \"{{email_client1}}\",\n  \"password\": {{$randomPassword}},\n  \"administrador\": \"false\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseURL}}/usuarios/",
															"host": [
																"{{baseURL}}"
															],
															"path": [
																"usuarios",
																""
															]
														},
														"description": "Não é permitido cadastrar usuário com email já utilizado"
													},
													"response": [
														{
															"name": "Cadastro com sucesso",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
														},
														{
															"name": "E-mail já cadastrado",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
														}
													]
												},
												{
													"name": "RU02-06 Excluir usuário",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//declaracao de variaveis",
																	"const response = pm.response.json();",
																	"",
																	"//----------------------------------testes----------------------------------",
																	"//---------------------------------status 200 ------------------------------",
																	"pm.test(\"Status code e 200 e nao erro\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.response.to.not.be.error; ",
																	"});",
																	"//corpo de resposta presente veio e e json",
																	"pm.test('Corpo de resposta json sem erro', function () {",
																	"    pm.response.to.have.jsonBody(); ",
																	"    pm.response.to.not.have.jsonBody(\"error\"); ",
																	"});",
																	"//teste da resposta contem menssagem",
																	"pm.test(\"contem menssagem e texto de exclusão\", function () {",
																	"    pm.expect(response[\"message\"]).to.exist",
																	"});",
																	"//body da resposta contem:",
																	"pm.test(\"Menssagem correta\", function() {",
																	"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");",
																	"});",
																	"/*pm.test(\"Menssagem correta\", function() {",
																	"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");",
																	"});",
																	"*/"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseURL}}/usuarios/:_id",
															"host": [
																"{{baseURL}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "{{client_id}}",
																	"description": "(Required) ID do usuário"
																}
															]
														},
														"description": "Não é permitido excluir usuário com carrinho."
													},
													"response": [
														{
															"name": "Registro excluído com sucesso | Nenhum registro excluído",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios/:_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios",
																		":_id"
																	],
																	"variable": [
																		{
																			"key": "_id",
																			"value": "0uxuPY0cbmQhpEz1",
																			"description": "(Required) ID do usuário"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
														},
														{
															"name": "Usuário com carrinho cadastrado",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios/:_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios",
																		":_id"
																	],
																	"variable": [
																		{
																			"key": "_id",
																			"value": "0uxuPY0cbmQhpEz1",
																			"description": "(Required) ID do usuário"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Não é permitido excluir usuário com carrinho cadastrado\",\n  \"idCarrinho\": \"qbMqntef4iTOwWfg\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "wrong-adm",
											"item": [
												{
													"name": "RU03-01 Cadastrar usuário no strg",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//declaracao de variaveis",
																	"const json_result = pm.response.json();",
																	"",
																	"//-----------------------------------testes---------------------------------",
																	"//--------------------------------status 400--------------------------------",
																	"//Verifica se o status code é 400",
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"    //pm.response.to.not.be.error; ",
																	"});",
																	"//corpo de resposta presente veio e e json",
																	"pm.test('Corpo de resposta json sem erro', function () {",
																	"    pm.response.to.have.jsonBody(); ",
																	"    pm.response.to.not.have.jsonBody(\"error\"); ",
																	"});",
																	"//verifica se as propriedades estão presentes",
																	"const propeties = [\"administrador\"];",
																	"propeties.forEach((prop) => {",
																	"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
																	"        pm.expect(json_result[prop]).to.exist;",
																	"    })",
																	"});",
																	"//verifica se o texto enviado é o correto",
																	"pm.test(\"Body matches string\", function() {",
																	"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//declaracao de variaveis e listas",
																	"const primeiroNome = [\"Leonardo\", \"Leandro\", \"Maria\", \"Joao\", \"Lucas\", \"Manoel\", \"luiza\", \"Antonio\", \"Ester\", \"Tifany\", \"Helena\", \"Clarrise\", \"Pedro\", \"Carlos\", 524829, \"Beto\", \"Roberto\", \"Beatriz\", \"Alice\"];",
																	"const sobreNome = [\"Andrade\", \"Paucar\", \"Oliveira\", \"Silva\", \"Carvalho\", \"Rocha\", \"Souza\", \"Martins\", \"castro\", \"Rodrigues\", \"Tavares\", 16458, \"Maia\", \"Betanea\", \"Silveira\"];",
																	"const provedor = [\"@gmail.com\", \"@yahoo.com.br\", \"@outlook.com\", \"@hotmail.com\"];",
																	"//pegando itens aleatorios das listas e armazenando nas variaveis",
																	"let nome1 = primeiroNome[_.random(primeiroNome.length -1)];",
																	"let nome2 = sobreNome[_.random(sobreNome.length -1)];",
																	"let prov = provedor[_.random(provedor.length -1)];",
																	"//concatenando os itens aleatorios",
																	"let nomeCompleto = nome1 + \" \" + nome2;",
																	"let email = nome1 + nome2 + prov",
																	"",
																	"//---------------------------------configurando as variaveis de ambiente --------------------------------",
																	"pm.environment.set(\"email_client1\", email);",
																	"pm.environment.set(\"cliente1\", nomeCompleto);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"nome\": \"{{cliente1}}\",\n  \"email\": \"{{email_client1}}\",\n  \"password\": \"{{psswd_client1}}\",\n  \"administrador\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseURL}}/usuarios/",
															"host": [
																"{{baseURL}}"
															],
															"path": [
																"usuarios",
																""
															]
														},
														"description": "Não é permitido cadastrar usuário com email já utilizado"
													},
													"response": [
														{
															"name": "Cadastro com sucesso",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
														},
														{
															"name": "E-mail já cadastrado",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
														}
													]
												},
												{
													"name": "RU03-02 Cadastrar usuário adm int",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//declaracao de variaveis",
																	"const json_result = pm.response.json();",
																	"",
																	"//-----------------------------------testes---------------------------------",
																	"//--------------------------------status 400--------------------------------",
																	"//Verifica se o status code é 400",
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"    //pm.response.to.not.be.error; ",
																	"});",
																	"//corpo de resposta presente veio e e json",
																	"pm.test('Corpo de resposta json sem erro', function () {",
																	"    pm.response.to.have.jsonBody(); ",
																	"    pm.response.to.not.have.jsonBody(\"error\"); ",
																	"});",
																	"//verifica se as propriedades estão presentes",
																	"const propeties = [\"administrador\"];",
																	"propeties.forEach((prop) => {",
																	"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
																	"        pm.expect(json_result[prop]).to.exist;",
																	"    })",
																	"});",
																	"//verifica se o texto enviado é o correto",
																	"pm.test(\"Body matches string\", function() {",
																	"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//declaracao de variaveis e listas",
																	"const primeiroNome = [\"Leonardo\", \"Leandro\", \"Maria\", \"Joao\", \"Lucas\", \"Manoel\", \"luiza\", \"Antonio\", \"Ester\", \"Tifany\", \"Helena\", \"Clarrise\", \"Pedro\", \"Carlos\", 524829, \"Beto\", \"Roberto\", \"Beatriz\", \"Alice\"];",
																	"const sobreNome = [\"Andrade\", \"Paucar\", \"Oliveira\", \"Silva\", \"Carvalho\", \"Rocha\", \"Souza\", \"Martins\", \"castro\", \"Rodrigues\", \"Tavares\", 16458, \"Maia\", \"Betanea\", \"Silveira\"];",
																	"const provedor = [\"@gmail.com\", \"@yahoo.com.br\", \"@outlook.com\", \"@hotmail.com\"];",
																	"//pegando itens aleatorios das listas e armazenando nas variaveis",
																	"let nome1 = primeiroNome[_.random(primeiroNome.length -1)];",
																	"let nome2 = sobreNome[_.random(sobreNome.length -1)];",
																	"let prov = provedor[_.random(provedor.length -1)];",
																	"//concatenando os itens aleatorios",
																	"let nomeCompleto = nome1 + \" \" + nome2;",
																	"let email = nome1 + nome2 + prov",
																	"",
																	"//---------------------------------configurando as variaveis de ambiente --------------------------------",
																	"pm.environment.set(\"email_client1\", email);",
																	"pm.environment.set(\"cliente1\", nomeCompleto);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"nome\": \"{{cliente1}}\",\n  \"email\": \"{{email_client1}}\",\n  \"password\": \"{{psswd_client1}}\",\n  \"administrador\": 0\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseURL}}/usuarios/",
															"host": [
																"{{baseURL}}"
															],
															"path": [
																"usuarios",
																""
															]
														},
														"description": "Não é permitido cadastrar usuário com email já utilizado"
													},
													"response": [
														{
															"name": "Cadastro com sucesso",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
														},
														{
															"name": "E-mail já cadastrado",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/usuarios",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"usuarios"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "id-Buscar-usuario",
									"item": [
										{
											"name": "RU04-01 Buscar usuário por ID - No id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//declaracao de variaveis",
															"const json_result = pm.response.json();",
															"",
															"//-----------------------------------testes---------------------------------",
															"//--------------------------------status 400--------------------------------",
															"//Verifica se o status code é 400",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"    //pm.response.to.not.be.error; ",
															"});",
															"//corpo de resposta presente veio e e json",
															"pm.test('Corpo de resposta json sem erro', function () {",
															"    pm.response.to.have.jsonBody(); ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															"//verifica se as propriedades estão presentes",
															"const propeties = [\"message\"];",
															"propeties.forEach((prop) => {",
															"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
															"        pm.expect(json_result[prop]).to.exist;",
															"    })",
															"});",
															"//verifica se o texto enviado é o correto",
															"pm.test(\"Body matches string\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"Usuário não encontrado\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseURL}}/usuarios/:_id",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "",
															"description": "(Required) ID do usuário"
														}
													]
												}
											},
											"response": [
												{
													"name": "Usuário encontrado",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\",\n  \"_id\": \"0uxuPY0cbmQhpEz1\"\n}"
												},
												{
													"name": "Usuário não encontrado",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Usuário não encontrado\"\n}"
												}
											]
										},
										{
											"name": "RU04-02 Buscar usuário por ID - noHeader",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//declaracao de variaveis",
															"const json_result = pm.response.json();",
															"",
															"//-----------------------------------testes---------------------------------",
															"//--------------------------------status 400--------------------------------",
															"//Verifica se o status code é 400",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"    //pm.response.to.not.be.error; ",
															"});",
															"//corpo de resposta presente veio e e json",
															"pm.test('Corpo de resposta json sem erro', function () {",
															"    pm.response.to.have.jsonBody(); ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															"//verifica se as propriedades estão presentes",
															"const propeties = [\"message\"];",
															"propeties.forEach((prop) => {",
															"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
															"        pm.expect(json_result[prop]).to.exist;",
															"    })",
															"});",
															"//verifica se o texto enviado é o correto",
															"pm.test(\"Body matches string\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"Usuário não encontrado\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseURL}}/usuarios/:_id",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "yk9cHOvSDWZ4DSYg"
														}
													]
												}
											},
											"response": [
												{
													"name": "Usuário encontrado",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\",\n  \"_id\": \"0uxuPY0cbmQhpEz1\"\n}"
												},
												{
													"name": "Usuário não encontrado",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Usuário não encontrado\"\n}"
												}
											]
										},
										{
											"name": "RU04-03 Listar usuários cadastrados",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//declaracao de variaveis",
															"const response = pm.response.json();",
															"const usu = response.usuarios;",
															"",
															"//--------------------------------------------testes--------------------------------",
															"//--------------------------------------status 200 ----------------------------------",
															"//Teste de erro correto",
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403); //falha primeiro encontrada por @amandaPaz",
															"    pm.response.to.be.error;",
															"});",
															"pm.test('Corpo de resposta json sem erro', function () {",
															"    pm.response.to.have.jsonBody(); ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															"//validação de atributos",
															"const atributos = ['quantidade', 'usuarios'];",
															"",
															"atributos.forEach((atributo) => {",
															"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
															"        pm.expect(pm.response.json()[atributo]).to.exist;",
															"    })",
															"});",
															"",
															"//validacao de atributos que a resposta nao deve ter",
															"const usu_list = ['email', 'password', 'administrador', '_id'];",
															"",
															"pm.test('Usuarios nao possui dados sensiveis', function (){",
															"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); //pm.expect(jsonData.form.customerName).to.not.include      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-ff6b5461-541e-4d40-9b8f-f9217b6ed99e",
															"   response.usuarios.forEach((usu) => {",
															"       pm.expect(usu).to.not.include.all.keys(usu_list);",
															"   });",
															"    ",
															"});",
															"",
															"//----------------------------configurando variaveis de ambiente -----------------------------",
															"//pegar o ultimo usuario cadastrado e gravar a id dele",
															"usu.forEach(usuario => {",
															"    //console.log(pm.environment.get(\"cliente1\"))",
															"    if( usuario.nome == (pm.environment.get(\"cliente1\"))) {",
															"        //console.log(\"entrei no if\");",
															"        pm.environment.set(\"client_id\", usuario._id);",
															"    }",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"host": true,
													"user-agent": true,
													"accept": true,
													"accept-encoding": true,
													"connection": true
												}
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseURL}}/usuarios",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"usuarios"
													],
													"query": [
														{
															"key": "_id",
															"value": "nostrud laboris ad",
															"disabled": true
														},
														{
															"key": "nome",
															"value": "nostrud laboris ad",
															"disabled": true
														},
														{
															"key": "email",
															"value": "nostrud laboris ad",
															"disabled": true
														},
														{
															"key": "password",
															"value": "nostrud laboris ad",
															"disabled": true
														},
														{
															"key": "administrador",
															"value": "false",
															"disabled": true
														}
													]
												}
											},
											"response": [
												{
													"name": "Lista de usuários",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios?_id=nostrud laboris ad&nome=nostrud laboris ad&email=nostrud laboris ad&password=nostrud laboris ad&administrador=false",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios"
															],
															"query": [
																{
																	"key": "_id",
																	"value": "nostrud laboris ad"
																},
																{
																	"key": "nome",
																	"value": "nostrud laboris ad"
																},
																{
																	"key": "email",
																	"value": "nostrud laboris ad"
																},
																{
																	"key": "password",
																	"value": "nostrud laboris ad"
																},
																{
																	"key": "administrador",
																	"value": "false"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"quantidade\": 1,\n  \"usuarios\": [\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    },\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    }\n  ]\n}"
												}
											]
										}
									]
								},
								{
									"name": "id-excluir-usuario",
									"item": [
										{
											"name": "RU05-01 Excluir usuário - no_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//declaracao de variaveis",
															"const json_result = pm.response.json();",
															"",
															"//-----------------------------------testes---------------------------------",
															"//--------------------------------status 400--------------------------------",
															"//Verifica se o status code é 400",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"    //pm.response.to.not.be.error; ",
															"});",
															"//corpo de resposta presente veio e e json",
															"pm.test('Corpo de resposta json sem erro', function () {",
															"    pm.response.to.have.jsonBody(); ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															"//verifica se as propriedades estão presentes",
															"const propeties = [\"message\"];",
															"propeties.forEach((prop) => {",
															"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
															"        pm.expect(json_result[prop]).to.exist;",
															"    })",
															"});",
															"//verifica se o texto enviado é o correto",
															"pm.test(\"Body matches string\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"Nenhum registro excluído\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseURL}}/usuarios/:_id",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "",
															"description": "(Required) ID do usuário"
														}
													]
												},
												"description": "Não é permitido excluir usuário com carrinho."
											},
											"response": [
												{
													"name": "Registro excluído com sucesso | Nenhum registro excluído",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
												},
												{
													"name": "Usuário com carrinho cadastrado",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Não é permitido excluir usuário com carrinho cadastrado\",\n  \"idCarrinho\": \"qbMqntef4iTOwWfg\"\n}"
												}
											]
										},
										{
											"name": "RU05-02 Excluir usuário - noHeader",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//declaracao de variaveis",
															"const json_result = pm.response.json();",
															"",
															"//-----------------------------------testes---------------------------------",
															"//--------------------------------status 400--------------------------------",
															"//Verifica se o status code é 400",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"    //pm.response.to.not.be.error; ",
															"});",
															"//corpo de resposta presente veio e e json",
															"pm.test('Corpo de resposta json sem erro', function () {",
															"    pm.response.to.have.jsonBody(); ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															"//verifica se as propriedades estão presentes",
															"const propeties = [\"message\"];",
															"propeties.forEach((prop) => {",
															"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
															"        pm.expect(json_result[prop]).to.exist;",
															"    })",
															"});",
															"//verifica se o texto enviado é o correto",
															"pm.test(\"Body matches string\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"Nenhum registro excluído\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseURL}}/usuarios/:_id",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "yk9cHOvSDWZ4DSYg",
															"description": "(Required) ID do usuário"
														}
													]
												},
												"description": "Não é permitido excluir usuário com carrinho."
											},
											"response": [
												{
													"name": "Registro excluído com sucesso | Nenhum registro excluído",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
												},
												{
													"name": "Usuário com carrinho cadastrado",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Não é permitido excluir usuário com carrinho cadastrado\",\n  \"idCarrinho\": \"qbMqntef4iTOwWfg\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "id-editar-usuario-auto",
									"item": [
										{
											"name": "RU06-01 Cadastrar usuário",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//declaracao de variaveis",
															"const json_result = pm.response.json();",
															"",
															"//-----------------------------------testes---------------------------------",
															"//--------------------------------status 201--------------------------------",
															"//Verifica se o status code é 201",
															"pm.test(\"Status code is 201 e nao erro\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.response.to.not.be.error; ",
															"});",
															"//corpo de resposta presente veio e e json",
															"pm.test('Corpo de resposta json sem erro', function () {",
															"    pm.response.to.have.jsonBody(); ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															"//verifica se as propriedades estão presentes",
															"const propeties = [\"message\", \"_id\"];",
															"propeties.forEach((prop) => {",
															"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
															"        pm.expect(json_result[prop]).to.exist;",
															"    })",
															"});",
															"//verifica se o texto enviado é o correto",
															"pm.test(\"Body matches string\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
															"});",
															"//console.log(json_result._id.length);",
															"//Tamanho da propriedade _id",
															"pm.test(\"Tamanho do id e o esperado\", function() {",
															"    pm.expect(json_result._id.length).to.be.eql(16);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//declaracao de variaveis e listas",
															"const primeiroNome = [\"Leonardo\", \"Leandro\", \"Maria\", \"Joao\", \"Lucas\", \"Manoel\", \"luiza\", \"Antonio\", \"Ester\", \"Tifany\", \"Helena\", \"Clarrise\", \"Pedro\", \"Carlos\", 524829, \"Beto\", \"Roberto\", \"Beatriz\", \"Alice\"];",
															"const sobreNome = [\"Andrade\", \"Paucar\", \"Oliveira\", \"Silva\", \"Carvalho\", \"Rocha\", \"Souza\", \"Martins\", \"castro\", \"Rodrigues\", \"Tavares\", 16458, \"Maia\", \"Betanea\", \"Silveira\"];",
															"const provedor = [\"@gmail.com\", \"@yahoo.com.br\", \"@outlook.com\", \"@hotmail.com\"];",
															"//pegando itens aleatorios das listas e armazenando nas variaveis",
															"let nome1 = primeiroNome[_.random(primeiroNome.length -1)];",
															"let nome2 = sobreNome[_.random(sobreNome.length -1)];",
															"let prov = provedor[_.random(provedor.length -1)];",
															"//concatenando os itens aleatorios",
															"let nomeCompleto = nome1 + \" \" + nome2;",
															"let email = nome1 + nome2 + prov",
															"",
															"//---------------------------------configurando as variaveis de ambiente --------------------------------",
															"pm.environment.set(\"email_client1\", email);",
															"pm.environment.set(\"cliente1\", nomeCompleto);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nome\": \"{{cliente1}}\",\n  \"email\": \"{{email_client1}}\",\n  \"password\": \"{{psswd_client1}}\",\n  \"administrador\": \"false\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURL}}/usuarios/",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"usuarios",
														""
													]
												},
												"description": "Não é permitido cadastrar usuário com email já utilizado"
											},
											"response": [
												{
													"name": "Cadastro com sucesso",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios"
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
												},
												{
													"name": "E-mail já cadastrado",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
												}
											]
										},
										{
											"name": "RU06-02 login - usuário existente",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//declaracao de variaveis",
															"const response = pm.response.json();",
															"",
															"//-------------------------------testes--------------------------",
															"//-----------------------------status 200------------------------",
															"//status code é 200",
															"pm.test(\"Status code e 200 e nao erro\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.response.to.not.be.error; ",
															"});",
															"//corpo de resposta presente veio e e json",
															"pm.test('Corpo de resposta json sem erro', function () {",
															"    pm.response.to.have.jsonBody(); ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															"//validação de atributos",
															"const atributos = ['message', 'authorization'];",
															"",
															"atributos.forEach((atributo) => {",
															"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
															"        pm.expect(pm.response.json()[atributo]).to.exist;",
															"    })",
															"});",
															"//body da resposta contem:",
															"pm.test(\"Menssagem correta\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");",
															"});",
															"//tamanho do token bearer certo",
															"/*",
															"pm.test('tamanho do token bearer esta correto', function() {",
															"    pm.expect(pm.response.json().authorization.length).to.be.equal(198);",
															"})",
															"*/",
															"",
															"//----------------------------configurando variaveis de ambiente -----------------------------",
															"pm.environment.set(\"token-bear\", response.authorization.slice(7));"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{email_client1}}\",\n  \"password\": \"12345\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURL}}/login",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "RU06-03 Listar usuários cadastrados",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//declaracao de variaveis",
															"const response = pm.response.json();",
															"const usu = response.usuarios;",
															"",
															"//--------------------------------------------testes--------------------------------",
															"//--------------------------------------status 200 ----------------------------------",
															"//Teste de erro correto",
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403); //falha primeiro encontrada por @amandaPaz",
															"    pm.response.to.be.error;",
															"});",
															"pm.test('Corpo de resposta json sem erro', function () {",
															"    pm.response.to.have.jsonBody(); ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															"//validação de atributos",
															"const atributos = ['quantidade', 'usuarios'];",
															"",
															"atributos.forEach((atributo) => {",
															"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
															"        pm.expect(pm.response.json()[atributo]).to.exist;",
															"    })",
															"});",
															"",
															"//validacao de atributos que a resposta nao deve ter",
															"const usu_list = ['email', 'password', 'administrador', '_id'];",
															"",
															"pm.test('Usuarios nao possui dados sensiveis', function (){",
															"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); //pm.expect(jsonData.form.customerName).to.not.include      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-ff6b5461-541e-4d40-9b8f-f9217b6ed99e",
															"   response.usuarios.forEach((usu) => {",
															"       pm.expect(usu).to.not.include.all.keys(usu_list);",
															"   });",
															"    ",
															"});",
															"",
															"//----------------------------configurando variaveis de ambiente -----------------------------",
															"//pegar o ultimo usuario cadastrado e gravar a id dele",
															"usu.forEach(usuario => {",
															"    //console.log(pm.environment.get(\"cliente1\"))",
															"    if( usuario.nome == (pm.environment.get(\"cliente1\"))) {",
															"        //console.log(\"entrei no if\");",
															"        pm.environment.set(\"client_id\", usuario._id);",
															"    }",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"host": true,
													"user-agent": true,
													"accept": true,
													"accept-encoding": true,
													"connection": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token-bear}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseURL}}/usuarios",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"usuarios"
													],
													"query": [
														{
															"key": "_id",
															"value": "nostrud laboris ad",
															"disabled": true
														},
														{
															"key": "nome",
															"value": "nostrud laboris ad",
															"disabled": true
														},
														{
															"key": "email",
															"value": "nostrud laboris ad",
															"disabled": true
														},
														{
															"key": "password",
															"value": "nostrud laboris ad",
															"disabled": true
														},
														{
															"key": "administrador",
															"value": "false",
															"disabled": true
														}
													]
												}
											},
											"response": [
												{
													"name": "Lista de usuários",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios?_id=nostrud laboris ad&nome=nostrud laboris ad&email=nostrud laboris ad&password=nostrud laboris ad&administrador=false",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios"
															],
															"query": [
																{
																	"key": "_id",
																	"value": "nostrud laboris ad"
																},
																{
																	"key": "nome",
																	"value": "nostrud laboris ad"
																},
																{
																	"key": "email",
																	"value": "nostrud laboris ad"
																},
																{
																	"key": "password",
																	"value": "nostrud laboris ad"
																},
																{
																	"key": "administrador",
																	"value": "false"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"quantidade\": 1,\n  \"usuarios\": [\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    },\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    }\n  ]\n}"
												}
											]
										},
										{
											"name": "RU06-04 Editar usuário - alt another account",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//declaracao de variaveis",
															"const json_result = pm.response.json();",
															"",
															"//-----------------------------------testes---------------------------------",
															"//--------------------------------status 400--------------------------------",
															"//Verifica se o status code é 400",
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"    //pm.response.to.not.be.error; ",
															"});",
															"//corpo de resposta presente veio e e json",
															"pm.test('Corpo de resposta json sem erro', function () {",
															"    pm.response.to.have.jsonBody(); ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															"//verifica se as propriedades estão presentes",
															"const propeties = [\"message\"];",
															"propeties.forEach((prop) => {",
															"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
															"        pm.expect(json_result[prop]).to.exist;",
															"    })",
															"});",
															"//verifica se o texto enviado é o correto",
															"pm.test(\"Body matches string\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token-bear}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nome\": \"Editado funcional\",\n  \"email\": \"edicaodeesquema@testao.yt\",\n  \"password\": \"teste-editado\",\n  \"administrador\": \"true\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURL}}/usuarios/:_id",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "vlHskDNeKH9qSXGV",
															"description": "(Required) ID do usuário"
														}
													]
												},
												"description": "Não é permitido cadastrar usuário com email já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
											},
											"response": [
												{
													"name": "Alterado com sucesso",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
												},
												{
													"name": "Cadastro com sucesso",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
												},
												{
													"name": "E-mail já cadastrado",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
												}
											]
										},
										{
											"name": "RU06-05 Editar usuário - noADM toADM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//declaracao de variaveis",
															"const json_result = pm.response.json();",
															"",
															"//-----------------------------------testes---------------------------------",
															"//--------------------------------status 400--------------------------------",
															"//Verifica se o status code é 400",
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"    //pm.response.to.not.be.error; ",
															"});",
															"//corpo de resposta presente veio e e json",
															"pm.test('Corpo de resposta json sem erro', function () {",
															"    pm.response.to.have.jsonBody(); ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															"//verifica se as propriedades estão presentes",
															"const propeties = [\"message\"];",
															"propeties.forEach((prop) => {",
															"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
															"        pm.expect(json_result[prop]).to.exist;",
															"    })",
															"});",
															"//verifica se o texto enviado é o correto",
															"pm.test(\"Body matches string\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token-bear}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nome\": \"{{cliente1}}\",\n  \"email\": \"{{email_client1}}\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURL}}/usuarios/:_id",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{client_id}}",
															"description": "(Required) ID do usuário"
														}
													]
												},
												"description": "Não é permitido cadastrar usuário com email já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
											},
											"response": [
												{
													"name": "Alterado com sucesso",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
												},
												{
													"name": "Cadastro com sucesso",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
												},
												{
													"name": "E-mail já cadastrado",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
												}
											]
										},
										{
											"name": "RU06-06 Excluir usuário",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//declaracao de variaveis",
															"const response = pm.response.json();",
															"",
															"//----------------------------------testes----------------------------------",
															"//---------------------------------status 200 ------------------------------",
															"pm.test(\"Status code e 200 e nao erro\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.response.to.not.be.error; ",
															"});",
															"//corpo de resposta presente veio e e json",
															"pm.test('Corpo de resposta json sem erro', function () {",
															"    pm.response.to.have.jsonBody(); ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															"//teste da resposta contem menssagem",
															"pm.test(\"contem menssagem e texto de exclusão\", function () {",
															"    pm.expect(response[\"message\"]).to.exist",
															"});",
															"//body da resposta contem:",
															"pm.test(\"Menssagem correta\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseURL}}/usuarios/:_id",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{client_id}}",
															"description": "(Required) ID do usuário"
														}
													]
												},
												"description": "Não é permitido excluir usuário com carrinho."
											},
											"response": [
												{
													"name": "Registro excluído com sucesso | Nenhum registro excluído",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
												},
												{
													"name": "Usuário com carrinho cadastrado",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Não é permitido excluir usuário com carrinho cadastrado\",\n  \"idCarrinho\": \"qbMqntef4iTOwWfg\"\n}"
												}
											]
										},
										{
											"name": "RU06-07 Editar usuário - alt another account noToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//declaracao de variaveis",
															"const json_result = pm.response.json();",
															"",
															"//-----------------------------------testes---------------------------------",
															"//--------------------------------status 400--------------------------------",
															"//Verifica se o status code é 400",
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"    //pm.response.to.not.be.error; ",
															"});",
															"//corpo de resposta presente veio e e json",
															"pm.test('Corpo de resposta json sem erro', function () {",
															"    pm.response.to.have.jsonBody(); ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															"//verifica se as propriedades estão presentes",
															"const propeties = [\"message\"];",
															"propeties.forEach((prop) => {",
															"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
															"        pm.expect(json_result[prop]).to.exist;",
															"    })",
															"});",
															"//verifica se o texto enviado é o correto",
															"pm.test(\"Body matches string\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nome\": \"Editado funcional\",\n  \"email\": \"edicaodeesquema@testao.yt\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURL}}/usuarios/:_id",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "vlHskDNeKH9qSXGV",
															"description": "(Required) ID do usuário"
														}
													]
												},
												"description": "Não é permitido cadastrar usuário com email já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
											},
											"response": [
												{
													"name": "Alterado com sucesso",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
												},
												{
													"name": "Cadastro com sucesso",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
												},
												{
													"name": "E-mail já cadastrado",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
												}
											]
										},
										{
											"name": "RU06-08 Editar usuário - alt another account noToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//declaracao de variaveis",
															"const response = pm.response.json();",
															"",
															"//----------------------------configurando variaveis de ambiente -----------------------------",
															"",
															"pm.environment.set(\"client_id\", response._id);",
															"",
															"//-----------------------------------testes---------------------------------",
															"//--------------------------------status 400--------------------------------",
															"//Verifica se o status code é 400",
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"    //pm.response.to.not.be.error; ",
															"});",
															"//corpo de resposta presente veio e e json",
															"pm.test('Corpo de resposta json sem erro', function () {",
															"    pm.response.to.have.jsonBody(); ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															"//verifica se as propriedades estão presentes",
															"const propeties = [\"message\"];",
															"propeties.forEach((prop) => {",
															"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
															"        pm.expect(response[prop]).to.exist;",
															"    })",
															"});",
															"//verifica se o texto enviado é o correto",
															"pm.test(\"Body matches string\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token-bear}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nome\": \"Experimento Elemento-X\",\n  \"email\": \"supermeninas@townsview.cn\",\n  \"password\": \"teste\",\n  \"administrador\": \"false\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURL}}/usuarios/:_id",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "",
															"description": "(Required) ID do usuário"
														}
													]
												},
												"description": "Não é permitido cadastrar usuário com email já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
											},
											"response": [
												{
													"name": "Alterado com sucesso",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
												},
												{
													"name": "Cadastro com sucesso",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
												},
												{
													"name": "E-mail já cadastrado",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
												}
											]
										},
										{
											"name": "RU06-09 Excluir usuário",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//declaracao de variaveis",
															"const response = pm.response.json();",
															"",
															"//----------------------------------testes----------------------------------",
															"//---------------------------------status 200 ------------------------------",
															"pm.test(\"Status code e 200 e nao erro\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.response.to.not.be.error; ",
															"});",
															"//corpo de resposta presente veio e e json",
															"pm.test('Corpo de resposta json sem erro', function () {",
															"    pm.response.to.have.jsonBody(); ",
															"    pm.response.to.not.have.jsonBody(\"error\"); ",
															"});",
															"//teste da resposta contem menssagem",
															"pm.test(\"contem menssagem e texto de exclusão\", function () {",
															"    pm.expect(response[\"message\"]).to.exist",
															"});",
															"//body da resposta contem:",
															"pm.test(\"Menssagem correta\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseURL}}/usuarios/:_id",
													"host": [
														"{{baseURL}}"
													],
													"path": [
														"usuarios",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "{{client_id}}",
															"description": "(Required) ID do usuário"
														}
													]
												},
												"description": "Não é permitido excluir usuário com carrinho."
											},
											"response": [
												{
													"name": "Registro excluído com sucesso | Nenhum registro excluído",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
												},
												{
													"name": "Usuário com carrinho cadastrado",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/usuarios/:_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"usuarios",
																":_id"
															],
															"variable": [
																{
																	"key": "_id",
																	"value": "0uxuPY0cbmQhpEz1",
																	"description": "(Required) ID do usuário"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"Não é permitido excluir usuário com carrinho cadastrado\",\n  \"idCarrinho\": \"qbMqntef4iTOwWfg\"\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "produtos-auto",
							"item": [
								{
									"name": "RP01-01 Realizar login Com credencial",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------------testes--------------------------",
													"//-----------------------------status 200------------------------",
													"//status code é 200",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message', 'authorization'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");",
													"});",
													"//tamanho do token bearer certo",
													"/*",
													"pm.test('tamanho do token bearer esta correto', function() {",
													"    pm.expect(pm.response.json().authorization.length).to.be.equal(198);",
													"})",
													"*/",
													"",
													"//----------------------------configurando variaveis de ambiente -----------------------------",
													"pm.environment.set(\"token-bear\", response.authorization.slice(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"leonardo@test.com\",\n  \"password\": \"12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										},
										"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
									},
									"response": [
										{
											"name": "Login realizado com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
										},
										{
											"name": "E-mail e/ou senha inválidos",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
										}
									]
								},
								{
									"name": "RP01-02 Cadastrar produto only name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const json_result = pm.response.json();",
													"",
													"//-----------------------------------testes---------------------------------",
													"//--------------------------------status 400--------------------------------",
													"//Verifica se o status code é 400",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    //pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//verifica se as propriedades estão presentes",
													"const propeties = [\"preco\", \"descricao\"];",
													"propeties.forEach((prop) => {",
													"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
													"        pm.expect(json_result[prop]).to.exist;",
													"    })",
													"});",
													"//verifica se o texto enviado é o correto",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número positivo\");",
													"    pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Estrela da eliana\",\n  \"preco\": 0,\n  \"descricao\": \"\",\n  \"quantidade\": 0\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								},
								{
									"name": "RP01-03 Cadastrar produto no preco no qtdd",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const json_result = pm.response.json();",
													"",
													"//-----------------------------------testes---------------------------------",
													"//--------------------------------status 400--------------------------------",
													"//Verifica se o status code é 400",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    //pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//verifica se as propriedades estão presentes",
													"const propeties = [\"preco\"];",
													"propeties.forEach((prop) => {",
													"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
													"        pm.expect(json_result[prop]).to.exist;",
													"    })",
													"});",
													"//verifica se o texto enviado é o correto",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número positivo\");",
													"    //pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Estrela da eliana\",\n  \"preco\": 0,\n  \"descricao\": \"E de brincar\",\n  \"quantidade\": 0\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								},
								{
									"name": "RP01-04 Cadastrar produto no preco no qtdd preco16",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const json_result = pm.response.json();",
													"",
													"//-----------------------------------testes---------------------------------",
													"//--------------------------------status 400--------------------------------",
													"//Verifica se o status code é 400",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    //pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//verifica se as propriedades estão presentes",
													"const propeties = [\"preco\"];",
													"propeties.forEach((prop) => {",
													"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
													"        pm.expect(json_result[prop]).to.exist;",
													"    })",
													"});",
													"//verifica se o texto enviado é o correto",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"must be a safe number - Erro number.unsafe - Abra uma issue informando essa resposta. https://github.com/ServeRest/ServeRest/issues\");  //primeiro achado por RenanRocha",
													"    //pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Estrela da eliana\",\n  \"preco\": 9999999999999999,\n  \"descricao\": \"E de brincar\",\n  \"quantidade\": 0\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								},
								{
									"name": "RP01-05 Cadastrar produto no preco qtdd 16",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const json_result = pm.response.json();",
													"",
													"//-----------------------------------testes---------------------------------",
													"//--------------------------------status 400--------------------------------",
													"//Verifica se o status code é 400",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    //pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//verifica se as propriedades estão presentes",
													"const propeties = [\"preco\"];",
													"propeties.forEach((prop) => {",
													"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
													"        pm.expect(json_result[prop]).to.exist;",
													"    })",
													"});",
													"//verifica se o texto enviado é o correto",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número positivo\");",
													"    pm.expect(pm.response.text()).to.include('must be a safe number - Erro number.unsafe - Abra uma issue informando essa resposta. https://github.com/ServeRest/ServeRest/issues');  //primeiro achado por RenanRocha",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Estrela da eliana\",\n  \"preco\": 0,\n  \"descricao\": \"E de brincar\",\n  \"quantidade\": 9999999999999999\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								},
								{
									"name": "RP01-06 Cadastrar produto negative preco",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const json_result = pm.response.json();",
													"",
													"//-----------------------------------testes---------------------------------",
													"//--------------------------------status 400--------------------------------",
													"//Verifica se o status code é 400",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    //pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//verifica se as propriedades estão presentes",
													"const propeties = [\"preco\"];",
													"propeties.forEach((prop) => {",
													"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
													"        pm.expect(json_result[prop]).to.exist;",
													"    })",
													"});",
													"//verifica se o texto enviado é o correto",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número positivo\");",
													"    //pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Estrela da eliana\",\n  \"preco\": -10,\n  \"descricao\": \"E de brincar\",\n  \"quantidade\": 0\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								},
								{
									"name": "RP01-07 Cadastrar produto float preco",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const json_result = pm.response.json();",
													"",
													"//-----------------------------------testes---------------------------------",
													"//--------------------------------status 400--------------------------------",
													"//Verifica se o status code é 400",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    //pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//verifica se as propriedades estão presentes",
													"const propeties = [\"preco\"];",
													"propeties.forEach((prop) => {",
													"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
													"        pm.expect(json_result[prop]).to.exist;",
													"    })",
													"});",
													"//verifica se o texto enviado é o correto",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"preco deve ser um inteiro\");",
													"    //pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Estrela da eliana\",\n  \"preco\": 0.00000000000001,\n  \"descricao\": \"E de brincar\",\n  \"quantidade\": 0\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								},
								{
									"name": "RP01-08 Cadastrar produto no qtdd",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-----------------------------------testes---------------------------------",
													"//--------------------------------status 400--------------------------------",
													"//Verifica se o status code é 400",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    //pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//verifica se as propriedades estão presentes",
													"const propeties = [\"message\", \"_id\"];",
													"propeties.forEach((prop) => {",
													"    pm.test(`Resposta Json, contem atributo \"${prop}\"`, () => {",
													"        pm.expect(response[prop]).to.exist;",
													"    })",
													"});",
													"//verifica se o texto enviado é o correto",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
													"});",
													"",
													"//----------------------------------configurando variaveis de ambiente ---------------------------------",
													"",
													"pm.environment.set(\"item_id\", response._id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nome\": \"Estrela da eliana\",\n  \"preco\": 10,\n  \"descricao\": \"E de brincar\",\n  \"quantidade\": 0\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								},
								{
									"name": "RP01-09 Editar produto negtv preco",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//---------------------------------------testes---------------------------------",
													"//-------------------------------------status 403-------------------------------",
													"//teste de status correto",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.error;",
													"});",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//teste de atributos da resposta",
													"const atributos = ['preco'];",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"//teste de texto de erro correto",
													"pm.test(\"menssagem correta de erro\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número positivo\")",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"nome\": \"Estrela da eliana\",\n\"preco\": -470,\n\"descricao\": \"E de brincar - editado\",\n\"quantidade\": 0\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/:_id",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{item_id}}",
													"description": "(Required) ID do produto"
												}
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
									},
									"response": [
										{
											"name": "Alterado com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
										},
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								},
								{
									"name": "RP01-10 Editar produto float preco",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//---------------------------------------testes---------------------------------",
													"//-------------------------------------status 403-------------------------------",
													"//teste de status correto",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.error;",
													"});",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//teste de atributos da resposta",
													"const atributos = ['preco'];",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"//teste de texto de erro correto",
													"pm.test(\"menssagem correta de erro\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"preco deve ser um inteiro\")",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"nome\": \"Estrela da eliana\",\n\"preco\": 0.0000000000001,\n\"descricao\": \"E de brincar - editado\",\n\"quantidade\": 0\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/:_id",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{item_id}}",
													"description": "(Required) ID do produto"
												}
											]
										},
										"description": "Não é permitido cadastrar produto com nome já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
									},
									"response": [
										{
											"name": "Alterado com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
										},
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Já existe produto com esse nome",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								},
								{
									"name": "RP01-11 Excluir produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//--------------------------testes----------------------",
													"//-------------------------status 200 ----------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e contem body json\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, pm.expect(pm.response.json()[atributo]).to.exist)",
													"})",
													"",
													"//resposta contem:",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseURL}}/produtos/:_id",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												":_id"
											],
											"variable": [
												{
													"key": "_id",
													"value": "{{item_id}}",
													"description": "(Required) ID do produto"
												}
											]
										},
										"description": "Não é permitido excluir produto que faz parte de carrinho."
									},
									"response": [
										{
											"name": "Registro excluído com sucesso | Nenhum registro excluído",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
										},
										{
											"name": "Produto faz parte de carrinho",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Não é permitido excluir produto que faz parte de carrinho\",\n  \"idCarrinho\": [\n    \"qbMqntef4iTOwWfg, yILJY1eaAUC6hyRc\",\n    \"qbMqntef4iTOwWfg, yILJY1eaAUC6hyRc\"\n  ]\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										},
										{
											"name": "Rota exclusiva para administradores (`administrador = true`)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/produtos/:_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"produtos",
														":_id"
													],
													"variable": [
														{
															"key": "_id",
															"value": "0uxuPY0cbmQhpEz1",
															"description": "(Required) ID do produto"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "carrinhos-auto",
							"item": [
								{
									"name": "RC01-01 Realizar login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------------testes--------------------------",
													"//-----------------------------status 200------------------------",
													"//status code é 200",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message', 'authorization'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");",
													"});",
													"//tamanho do token bearer certo",
													"pm.test('tamanho do token bearer esta correto', function() {",
													"    pm.expect(pm.response.json().authorization.length).to.be.equal(198);",
													"});",
													"",
													"",
													"//----------------------------configurando variaveis de ambiente -----------------------------",
													"pm.environment.set(\"token-bear\", response.authorization.slice(7));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"leonardo@test.com\",\n  \"password\": \"12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										},
										"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
									},
									"response": [
										{
											"name": "Login realizado com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
										},
										{
											"name": "E-mail e/ou senha inválidos",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
										}
									]
								},
								{
									"name": "RC01-02 Listar carrinhos cadastrados",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//--------------------------------------testes-----------------------------",
													"//----------------------------------status 200-----------------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['quantidade', 'carrinhos'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"})",
													"//o numero da propriedade quantidade condiz com o tamanho da lista",
													"pm.test(\"A quantidade corresponde a quantidade de carrinhos\", function (){",
													"    pm.expect(response.carrinhos.length).to.be.equal(response.quantidade)",
													"});",
													"//teste de propriedades dos carrinhos e dos itens dentro dos carrinhos",
													"pm.test('Resposta contem todos os atributos dos carrinhos', function (){",
													"    const carr_list = [\"produtos\", \"precoTotal\", \"quantidadeTotal\", \"idUsuario\", \"_id\"];",
													"    const prod_list = [\"idProduto\", \"quantidade\", \"precoUnitario\"];",
													"    //pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');      //https://www.postman.com/postman/workspace/test-examples-in-postman/request/1559645-edd08e85-3304-4b1c-a5b1-27f413fe89c9",
													"   response.carrinhos.forEach((carrinho) => {",
													"       //console.log (carrinho.produtos);",
													"       pm.expect(carrinho).to.have.all.keys(carr_list);",
													"       carrinho.produtos.forEach((produto) => {",
													"           pm.expect(produto).to.have.all.keys(prod_list);",
													"       });",
													"   });",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											],
											"query": [
												{
													"key": "_id",
													"value": "nostrud laboris ad",
													"disabled": true
												},
												{
													"key": "precoTotal",
													"value": "73417346",
													"disabled": true
												},
												{
													"key": "quantidadeTotal",
													"value": "80996386",
													"disabled": true
												},
												{
													"key": "idUsuario",
													"value": "nostrud laboris ad",
													"disabled": true
												}
											]
										},
										"description": "Os carrinhos retornados são únicos por usuário"
									},
									"response": [
										{
											"name": "Lista de carrinhos",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/carrinhos?_id=nostrud laboris ad&precoTotal=73417346&quantidadeTotal=80996386&idUsuario=nostrud laboris ad",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													],
													"query": [
														{
															"key": "_id",
															"value": "nostrud laboris ad"
														},
														{
															"key": "precoTotal",
															"value": "73417346"
														},
														{
															"key": "quantidadeTotal",
															"value": "80996386"
														},
														{
															"key": "idUsuario",
															"value": "nostrud laboris ad"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"quantidade\": 1,\n  \"carrinhos\": [\n    {\n      \"produtos\": [\n        {\n          \"idProduto\": \"qui ipsum\",\n          \"quantidade\": -89830249,\n          \"precoUnitario\": -34165676\n        },\n        {\n          \"idProduto\": \"cupidatat est\",\n          \"quantidade\": 80989615,\n          \"precoUnitario\": -93821149\n        }\n      ],\n      \"precoTotal\": 10950,\n      \"quantidadeTotal\": 3,\n      \"idUsuario\": \"oUb7aGkMtSEPf6BZ\",\n      \"_id\": \"aFOUqntef4iaOwWfg\"\n    },\n    {\n      \"produtos\": [\n        {\n          \"idProduto\": \"consectetur cupidatat\",\n          \"quantidade\": -69929201,\n          \"precoUnitario\": -99104276\n        },\n        {\n          \"idProduto\": \"officia cupidatat\",\n          \"quantidade\": 59167892,\n          \"precoUnitario\": 99248397\n        }\n      ],\n      \"precoTotal\": 10950,\n      \"quantidadeTotal\": 3,\n      \"idUsuario\": \"oUb7aGkMtSEPf6BZ\",\n      \"_id\": \"aFOUqntef4iaOwWfg\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "RC01-03 Cadastrar carrinho item inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"const stats = pm.response.status;",
													"//console.log (stats);",
													"",
													"//------------------------testes------------------------",
													"",
													"//----------------------status code 201 -------------------",
													"if(   stats == 'Created'){",
													"    //Item criado com sucesso",
													"    pm.test(\"Status code e 201 e nao erro\", function () {",
													"        pm.response.to.have.status(201);",
													"        pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json sem erro', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validação de atributos",
													"    const atributos = ['message', '_id'];",
													"",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    })",
													"    //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
													"    })",
													"}",
													"",
													"//-----------------------status code 400----------------------",
													"if ( stats == 'Bad Request'){",
													"    //status de erro",
													"    pm.test(\"Status code e 400\", function () {",
													"        pm.response.to.have.status(400);",
													"        //pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        //pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validacao de atributos",
													"    const atributos = ['message', 'item'];",
													"    ",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    });",
													"    //validacao de atributos dos itens ",
													"    const item_list = [\"idProduto\", \"quantidade\", \"index\"] ",
													"",
													"    pm.test('Teste de atributos do item', () => {",
													"        pm.expect(response.item).to.have.all.keys(item_list)",
													"    })",
													"     //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"Produto não encontrado\");",
													"    })",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"produtos\": [{\n    \"idProduto\": \"DVD box de One piece\",\n    \"quantidade\": \"10\"\n  }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										},
										"description": "O carrinho é vinculado ao usuário do token enviado no header `Authorization`, sendo possível cadastrar apenas 1 carrinho por usuário.\nAo cadastrar carrinho com sucesso é feita a redução da quantidade no cadastro de cada produto inserido no carrinho.\n"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Algo deu errado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Não é permitido possuir produto duplicado | Não é permitido ter mais de 1 carrinho | Produto não encontrado | Produto não possui quantidade suficiente\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										}
									]
								},
								{
									"name": "RC01-04 Cadastrar carrinho qtdd neg",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"const stats = pm.response.status;",
													"//console.log (stats);",
													"",
													"//------------------------testes------------------------",
													"",
													"//----------------------status code 201 -------------------",
													"if(   stats == 'Created'){",
													"    //Item criado com sucesso",
													"    pm.test(\"Status code e 201 e nao erro\", function () {",
													"        pm.response.to.have.status(201);",
													"        pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json sem erro', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validação de atributos",
													"    const atributos = ['message', '_id'];",
													"",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    })",
													"    //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
													"    })",
													"}",
													"",
													"//-----------------------status code 400----------------------",
													"if ( stats == 'Bad Request'){",
													"    //status de erro",
													"    pm.test(\"Status code e 400\", function () {",
													"        pm.response.to.have.status(400);",
													"        //pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        //pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validacao de atributos",
													"    const atributos = ['produtos'];",
													"    ",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    });",
													"     //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número positivo\");",
													"        pm.expect(pm.response.text()).to.include(\"produtos não contém 1 valor obrigatório\")",
													"    })",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"produtos\": [{\n    \"idProduto\": \"BeeJh5lz3k6kSIzA\",\n    \"quantidade\": \"-10\"\n  }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										},
										"description": "O carrinho é vinculado ao usuário do token enviado no header `Authorization`, sendo possível cadastrar apenas 1 carrinho por usuário.\nAo cadastrar carrinho com sucesso é feita a redução da quantidade no cadastro de cada produto inserido no carrinho.\n"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Algo deu errado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Não é permitido possuir produto duplicado | Não é permitido ter mais de 1 carrinho | Produto não encontrado | Produto não possui quantidade suficiente\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										}
									]
								},
								{
									"name": "RC01-05 Cadastrar carrinho qtdd 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"const stats = pm.response.status;",
													"//console.log (stats);",
													"",
													"//------------------------testes------------------------",
													"",
													"//----------------------status code 201 -------------------",
													"if(   stats == 'Created'){",
													"    //Item criado com sucesso",
													"    pm.test(\"Status code e 201 e nao erro\", function () {",
													"        pm.response.to.have.status(201);",
													"        pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json sem erro', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validação de atributos",
													"    const atributos = ['message', '_id'];",
													"",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    })",
													"    //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
													"    })",
													"}",
													"",
													"//-----------------------status code 400----------------------",
													"if ( stats == 'Bad Request'){",
													"    //status de erro",
													"    pm.test(\"Status code e 400\", function () {",
													"        pm.response.to.have.status(400);",
													"        //pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        //pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validacao de atributos",
													"    const atributos = ['produtos'];",
													"    ",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    });",
													"     //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número positivo\");",
													"        pm.expect(pm.response.text()).to.include(\"produtos não contém 1 valor obrigatório\")",
													"    })",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"produtos\": [{\n    \"idProduto\": \"BeeJh5lz3k6kSIzA\",\n    \"quantidade\": \"0\"\n  }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										},
										"description": "O carrinho é vinculado ao usuário do token enviado no header `Authorization`, sendo possível cadastrar apenas 1 carrinho por usuário.\nAo cadastrar carrinho com sucesso é feita a redução da quantidade no cadastro de cada produto inserido no carrinho.\n"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Algo deu errado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Não é permitido possuir produto duplicado | Não é permitido ter mais de 1 carrinho | Produto não encontrado | Produto não possui quantidade suficiente\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										}
									]
								},
								{
									"name": "RC01-06 Cadastrar carrinho qtdd strg",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"const stats = pm.response.status;",
													"//console.log (stats);",
													"",
													"//------------------------testes------------------------",
													"",
													"//----------------------status code 201 -------------------",
													"if(   stats == 'Created'){",
													"    //Item criado com sucesso",
													"    pm.test(\"Status code e 201 e nao erro\", function () {",
													"        pm.response.to.have.status(201);",
													"        pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json sem erro', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validação de atributos",
													"    const atributos = ['message', '_id'];",
													"",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    })",
													"    //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
													"    })",
													"}",
													"",
													"//-----------------------status code 400----------------------",
													"if ( stats == 'Bad Request'){",
													"    //status de erro",
													"    pm.test(\"Status code e 400\", function () {",
													"        pm.response.to.have.status(400);",
													"        //pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        //pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validacao de atributos",
													"    const atributos = ['produtos'];",
													"    ",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    });",
													"     //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");",
													"        pm.expect(pm.response.text()).to.include(\"produtos não contém 1 valor obrigatório\")",
													"    })",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"produtos\": [{\n    \"idProduto\": \"BeeJh5lz3k6kSIzA\",\n    \"quantidade\": \"a\"\n  }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										},
										"description": "O carrinho é vinculado ao usuário do token enviado no header `Authorization`, sendo possível cadastrar apenas 1 carrinho por usuário.\nAo cadastrar carrinho com sucesso é feita a redução da quantidade no cadastro de cada produto inserido no carrinho.\n"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Algo deu errado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Não é permitido possuir produto duplicado | Não é permitido ter mais de 1 carrinho | Produto não encontrado | Produto não possui quantidade suficiente\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										}
									]
								},
								{
									"name": "RC01-07 Cadastrar carrinho",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"const stats = pm.response.status;",
													"//console.log (stats);",
													"",
													"//------------------------testes------------------------",
													"",
													"//----------------------status code 201 -------------------",
													"if(   stats == 'Created'){",
													"    //Item criado com sucesso",
													"    pm.test(\"Status code e 201 e nao erro\", function () {",
													"        pm.response.to.have.status(201);",
													"        pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json sem erro', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validação de atributos",
													"    const atributos = ['message', '_id'];",
													"",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    })",
													"    //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
													"    })",
													"}",
													"",
													"//-----------------------status code 400----------------------",
													"if ( stats == 'Bad Request'){",
													"    //status de erro",
													"    pm.test(\"Status code e 400\", function () {",
													"        pm.response.to.have.status(400);",
													"        //pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        //pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validacao de atributos",
													"    const atributos = ['produtos'];",
													"    ",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    });",
													"     //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");",
													"        pm.expect(pm.response.text()).to.include(\"produtos não contém 1 valor obrigatório\")",
													"    })",
													"    ",
													"}",
													"",
													"",
													"//------------------------configurando variaveis de ambiente ------------------------",
													"",
													"pm.environment.set(\"id\", response._id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"produtos\": [{\n    \"idProduto\": \"yeDdGmRmqodGzXns\",\n    \"quantidade\": \"1\"\n  }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										},
										"description": "O carrinho é vinculado ao usuário do token enviado no header `Authorization`, sendo possível cadastrar apenas 1 carrinho por usuário.\nAo cadastrar carrinho com sucesso é feita a redução da quantidade no cadastro de cada produto inserido no carrinho.\n"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Algo deu errado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Não é permitido possuir produto duplicado | Não é permitido ter mais de 1 carrinho | Produto não encontrado | Produto não possui quantidade suficiente\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										}
									]
								},
								{
									"name": "RC01-08 Excluir carrinho no header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//--------------------------testes----------------------",
													"//-------------------------status 200 ----------------------",
													"//Item criado com sucesso",
													"pm.test(\"Status code e 200 e contem body json\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, pm.expect(pm.response.json()[atributo]).to.exist)",
													"})",
													"",
													"//resposta contem:",
													"pm.test(\"Body matches string\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURL}}/carrinhos/concluir-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"concluir-compra"
											]
										},
										"description": "Ao concluir uma compra o carrinho é excluído.\nO carrinho excluído será o vinculado ao usuário do `token` utilizado.\n"
									},
									"response": [
										{
											"name": "Registro excluído com sucesso | Não foi encontrado carrinho para esse usuário",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/carrinhos/concluir-compra",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos",
														"concluir-compra"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro excluído com sucesso | Não foi encontrado carrinho para esse usuário\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/carrinhos/concluir-compra",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos",
														"concluir-compra"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										}
									]
								},
								{
									"name": "RC01-09 Cadastrar carrinho",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"const stats = pm.response.status;",
													"//console.log (stats);",
													"",
													"//------------------------testes------------------------",
													"",
													"//----------------------status code 201 -------------------",
													"if(   stats == 'Created'){",
													"    //Item criado com sucesso",
													"    pm.test(\"Status code e 201 e nao erro\", function () {",
													"        pm.response.to.have.status(201);",
													"        pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json sem erro', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validação de atributos",
													"    const atributos = ['message', '_id'];",
													"",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    })",
													"    //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");",
													"    })",
													"}",
													"",
													"//-----------------------status code 400----------------------",
													"if ( stats == 'Bad Request'){",
													"    //status de erro",
													"    pm.test(\"Status code e 400\", function () {",
													"        pm.response.to.have.status(400);",
													"        //pm.response.to.not.be.error; ",
													"    });",
													"    //corpo de resposta presente veio e e json",
													"    pm.test('Corpo de resposta json', function () {",
													"        pm.response.to.have.jsonBody(); ",
													"        //pm.response.to.not.have.jsonBody(\"error\"); ",
													"    });",
													"    //validacao de atributos",
													"    const atributos = ['produtos'];",
													"    ",
													"    atributos.forEach((atributo) => {",
													"        pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"            pm.expect(pm.response.json()[atributo]).to.exist;",
													"        })",
													"    });",
													"     //resposta de validacao correta",
													"    pm.test(\"Menssagem correta\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");",
													"        pm.expect(pm.response.text()).to.include(\"produtos não contém 1 valor obrigatório\")",
													"    })",
													"    ",
													"}",
													"",
													"",
													"//------------------------configurando variaveis de ambiente ------------------------",
													"",
													"pm.environment.set(\"id\", response._id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"produtos\": [{\n    \"idProduto\": \"yeDdGmRmqodGzXns\",\n    \"quantidade\": \"1\"\n  }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										},
										"description": "O carrinho é vinculado ao usuário do token enviado no header `Authorization`, sendo possível cadastrar apenas 1 carrinho por usuário.\nAo cadastrar carrinho com sucesso é feita a redução da quantidade no cadastro de cada produto inserido no carrinho.\n"
									},
									"response": [
										{
											"name": "Cadastro com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
										},
										{
											"name": "Algo deu errado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Não é permitido possuir produto duplicado | Não é permitido ter mais de 1 carrinho | Produto não encontrado | Produto não possui quantidade suficiente\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"anim in sint\",\n    \"quantidade\": -38703615\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/carrinhos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										}
									]
								},
								{
									"name": "RC01-10 Excluir carrinho e retornar produtos para estoque no header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//---------------------------------testes----------------------------",
													"//------------------------------status 200 --------------------------",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//teste da resposta contem menssagem",
													"pm.test(\"contem menssagem e texto de exclusão\", function () {",
													"    pm.expect(response[\"message\"]).to.exist",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso. Estoque dos produtos reabastecido\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token-bear}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseURL}}/carrinhos/cancelar-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"cancelar-compra"
											]
										},
										"description": "Ao cancelar uma compra o carrinho é excluído e o estoque dos produtos desse carrinho é reabastecido.\nO carrinho excluído será o vinculado ao usuário do `token` utilizado.\n"
									},
									"response": [
										{
											"name": "Registro excluído com sucesso | Não foi encontrado carrinho para esse usuário",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos",
														"cancelar-compra"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Registro excluído com sucesso | Não foi encontrado carrinho para esse usuário\"\n}"
										},
										{
											"name": "Token ausente, inválido ou expirado",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"carrinhos",
														"cancelar-compra"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "login",
							"item": [
								{
									"name": "RL01-01 Realizar login - No psswd",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------------testes--------------------------",
													"//-----------------------------status 400------------------------",
													"pm.test(\"Status code e 400 e e erro\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['password'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"leonardo@test.com\",\n  \"password\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										},
										"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
									},
									"response": [
										{
											"name": "Login realizado com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
										},
										{
											"name": "E-mail e/ou senha inválidos",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
										}
									]
								},
								{
									"name": "RL01-02 Realizar login - No email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------------testes--------------------------",
													"//-----------------------------status 400------------------------",
													"pm.test(\"Status code e 400 e e erro\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['email'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"\",\n  \"password\": \"12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										},
										"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
									},
									"response": [
										{
											"name": "Login realizado com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
										},
										{
											"name": "E-mail e/ou senha inválidos",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
										}
									]
								},
								{
									"name": "RL01-03 Realizar login - No email No psswrd",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------------testes--------------------------",
													"//-----------------------------status 400------------------------",
													"pm.test(\"Status code e 400 e e erro\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['email', 'password'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");",
													"     pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"\",\n  \"password\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										},
										"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
									},
									"response": [
										{
											"name": "Login realizado com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
										},
										{
											"name": "E-mail e/ou senha inválidos",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
										}
									]
								},
								{
									"name": "RL01-04 Realizar login - psswrd Not strg",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------------testes--------------------------",
													"//-----------------------------status 400------------------------",
													"pm.test(\"Status code e 400 e e erro\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['password'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"password deve ser uma string\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"leonardo@test.com\",\n  \"password\": 12345\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										},
										"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
									},
									"response": [
										{
											"name": "Login realizado com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
										},
										{
											"name": "E-mail e/ou senha inválidos",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
										}
									]
								},
								{
									"name": "RL01-05 Realizar login - Cap on email strg",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------------testes--------------------------",
													"//-----------------------------status 400------------------------",
													"pm.test(\"Status code e 401 e e erro\", function () {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"lEonardo@test.com\",\n  \"password\": \"12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										},
										"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
									},
									"response": [
										{
											"name": "Login realizado com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
										},
										{
											"name": "E-mail e/ou senha inválidos",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
										}
									]
								},
								{
									"name": "RL01-06 Realizar login - No header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//declaracao de variaveis",
													"const response = pm.response.json();",
													"",
													"//-------------------------------testes--------------------------",
													"//-----------------------------status 200------------------------",
													"//status code é 200",
													"pm.test(\"Status code e 200 e nao erro\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error; ",
													"});",
													"//corpo de resposta presente veio e e json",
													"pm.test('Corpo de resposta json sem erro', function () {",
													"    pm.response.to.have.jsonBody(); ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													"//validação de atributos",
													"const atributos = ['message', 'authorization'];",
													"",
													"atributos.forEach((atributo) => {",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {",
													"        pm.expect(pm.response.json()[atributo]).to.exist;",
													"    })",
													"});",
													"//body da resposta contem:",
													"pm.test(\"Menssagem correta\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"leonardo@test.com\",\n  \"password\": \"12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										},
										"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
									},
									"response": [
										{
											"name": "Login realizado com sucesso",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
										},
										{
											"name": "E-mail e/ou senha inválidos",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "//localhost:3000",
			"type": "string"
		},
		{
			"key": "carrinho_id",
			"value": ""
		},
		{
			"key": "item_id",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		}
	]
}